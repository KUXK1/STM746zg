
STM746zg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b0c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08006cd4  08006cd4  00007cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f34  08006f34  0000814c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f34  08006f34  00007f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f3c  08006f3c  0000814c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f3c  08006f3c  00007f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f40  08006f40  00007f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006f44  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08006f50  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08006ff0  000080ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000718  2000014c  08007090  0000814c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000864  08007090  00008864  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000814c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019302  00000000  00000000  0000817c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003569  00000000  00000000  0002147e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001580  00000000  00000000  000249e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010de  00000000  00000000  00025f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000287ef  00000000  00000000  00027046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020a37  00000000  00000000  0004f835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8c4c  00000000  00000000  0007026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00168eb8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005b1c  00000000  00000000  00168efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  0016ea18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006cbc 	.word	0x08006cbc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	08006cbc 	.word	0x08006cbc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80004fc:	4b1f      	ldr	r3, [pc, #124]	@ (800057c <MX_ETH_Init+0x84>)
 80004fe:	4a20      	ldr	r2, [pc, #128]	@ (8000580 <MX_ETH_Init+0x88>)
 8000500:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000502:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <MX_ETH_Init+0x8c>)
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000508:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <MX_ETH_Init+0x8c>)
 800050a:	2280      	movs	r2, #128	@ 0x80
 800050c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800050e:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <MX_ETH_Init+0x8c>)
 8000510:	22e1      	movs	r2, #225	@ 0xe1
 8000512:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000514:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <MX_ETH_Init+0x8c>)
 8000516:	2200      	movs	r2, #0
 8000518:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800051a:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <MX_ETH_Init+0x8c>)
 800051c:	2200      	movs	r2, #0
 800051e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000520:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <MX_ETH_Init+0x8c>)
 8000522:	2200      	movs	r2, #0
 8000524:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <MX_ETH_Init+0x84>)
 8000528:	4a16      	ldr	r2, [pc, #88]	@ (8000584 <MX_ETH_Init+0x8c>)
 800052a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800052c:	4b13      	ldr	r3, [pc, #76]	@ (800057c <MX_ETH_Init+0x84>)
 800052e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000532:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <MX_ETH_Init+0x84>)
 8000536:	4a14      	ldr	r2, [pc, #80]	@ (8000588 <MX_ETH_Init+0x90>)
 8000538:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <MX_ETH_Init+0x84>)
 800053c:	4a13      	ldr	r2, [pc, #76]	@ (800058c <MX_ETH_Init+0x94>)
 800053e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000540:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <MX_ETH_Init+0x84>)
 8000542:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000546:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000548:	480c      	ldr	r0, [pc, #48]	@ (800057c <MX_ETH_Init+0x84>)
 800054a:	f000 ff1f 	bl	800138c <HAL_ETH_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000554:	f000 faa6 	bl	8000aa4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000558:	2238      	movs	r2, #56	@ 0x38
 800055a:	2100      	movs	r1, #0
 800055c:	480c      	ldr	r0, [pc, #48]	@ (8000590 <MX_ETH_Init+0x98>)
 800055e:	f006 fb80 	bl	8006c62 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000562:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <MX_ETH_Init+0x98>)
 8000564:	2221      	movs	r2, #33	@ 0x21
 8000566:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000568:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <MX_ETH_Init+0x98>)
 800056a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800056e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000570:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <MX_ETH_Init+0x98>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200001a0 	.word	0x200001a0
 8000580:	40028000 	.word	0x40028000
 8000584:	20000250 	.word	0x20000250
 8000588:	200000ac 	.word	0x200000ac
 800058c:	2000000c 	.word	0x2000000c
 8000590:	20000168 	.word	0x20000168

08000594 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08e      	sub	sp, #56	@ 0x38
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a4e      	ldr	r2, [pc, #312]	@ (80006ec <HAL_ETH_MspInit+0x158>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	f040 8096 	bne.w	80006e4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005b8:	4b4d      	ldr	r3, [pc, #308]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005bc:	4a4c      	ldr	r2, [pc, #304]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 80005be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c4:	4b4a      	ldr	r3, [pc, #296]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005cc:	623b      	str	r3, [r7, #32]
 80005ce:	6a3b      	ldr	r3, [r7, #32]
 80005d0:	4b47      	ldr	r3, [pc, #284]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d4:	4a46      	ldr	r2, [pc, #280]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 80005d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005da:	6313      	str	r3, [r2, #48]	@ 0x30
 80005dc:	4b44      	ldr	r3, [pc, #272]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005e4:	61fb      	str	r3, [r7, #28]
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	4b41      	ldr	r3, [pc, #260]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ec:	4a40      	ldr	r2, [pc, #256]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 80005ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80005f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f4:	4b3e      	ldr	r3, [pc, #248]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80005fc:	61bb      	str	r3, [r7, #24]
 80005fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000600:	4b3b      	ldr	r3, [pc, #236]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000604:	4a3a      	ldr	r2, [pc, #232]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6313      	str	r3, [r2, #48]	@ 0x30
 800060c:	4b38      	ldr	r3, [pc, #224]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b35      	ldr	r3, [pc, #212]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	4a34      	ldr	r2, [pc, #208]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6313      	str	r3, [r2, #48]	@ 0x30
 8000624:	4b32      	ldr	r3, [pc, #200]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000634:	4a2e      	ldr	r2, [pc, #184]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 8000636:	f043 0302 	orr.w	r3, r3, #2
 800063a:	6313      	str	r3, [r2, #48]	@ 0x30
 800063c:	4b2c      	ldr	r3, [pc, #176]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000640:	f003 0302 	and.w	r3, r3, #2
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000648:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064c:	4a28      	ldr	r2, [pc, #160]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 800064e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000652:	6313      	str	r3, [r2, #48]	@ 0x30
 8000654:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <HAL_ETH_MspInit+0x15c>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000660:	2332      	movs	r3, #50	@ 0x32
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000670:	230b      	movs	r3, #11
 8000672:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000678:	4619      	mov	r1, r3
 800067a:	481e      	ldr	r0, [pc, #120]	@ (80006f4 <HAL_ETH_MspInit+0x160>)
 800067c:	f001 f9d4 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000680:	2386      	movs	r3, #134	@ 0x86
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000690:	230b      	movs	r3, #11
 8000692:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000698:	4619      	mov	r1, r3
 800069a:	4817      	ldr	r0, [pc, #92]	@ (80006f8 <HAL_ETH_MspInit+0x164>)
 800069c:	f001 f9c4 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a6:	2302      	movs	r3, #2
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ae:	2303      	movs	r3, #3
 80006b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b2:	230b      	movs	r3, #11
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ba:	4619      	mov	r1, r3
 80006bc:	480f      	ldr	r0, [pc, #60]	@ (80006fc <HAL_ETH_MspInit+0x168>)
 80006be:	f001 f9b3 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006c2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006dc:	4619      	mov	r1, r3
 80006de:	4808      	ldr	r0, [pc, #32]	@ (8000700 <HAL_ETH_MspInit+0x16c>)
 80006e0:	f001 f9a2 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80006e4:	bf00      	nop
 80006e6:	3738      	adds	r7, #56	@ 0x38
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40028000 	.word	0x40028000
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020000 	.word	0x40020000
 80006fc:	40020400 	.word	0x40020400
 8000700:	40021800 	.word	0x40021800

08000704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b47      	ldr	r3, [pc, #284]	@ (8000838 <MX_GPIO_Init+0x134>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a46      	ldr	r2, [pc, #280]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b44      	ldr	r3, [pc, #272]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	4b41      	ldr	r3, [pc, #260]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a40      	ldr	r2, [pc, #256]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b3e      	ldr	r3, [pc, #248]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b3b      	ldr	r3, [pc, #236]	@ (8000838 <MX_GPIO_Init+0x134>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a3a      	ldr	r2, [pc, #232]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b38      	ldr	r3, [pc, #224]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b35      	ldr	r3, [pc, #212]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a34      	ldr	r2, [pc, #208]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b32      	ldr	r3, [pc, #200]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <MX_GPIO_Init+0x134>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a2e      	ldr	r2, [pc, #184]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a28      	ldr	r2, [pc, #160]	@ (8000838 <MX_GPIO_Init+0x134>)
 8000798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <MX_GPIO_Init+0x134>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007b0:	4822      	ldr	r0, [pc, #136]	@ (800083c <MX_GPIO_Init+0x138>)
 80007b2:	f001 fca9 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	4821      	ldr	r0, [pc, #132]	@ (8000840 <MX_GPIO_Init+0x13c>)
 80007bc:	f001 fca4 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	481b      	ldr	r0, [pc, #108]	@ (8000844 <MX_GPIO_Init+0x140>)
 80007d8:	f001 f926 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007dc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4811      	ldr	r0, [pc, #68]	@ (800083c <MX_GPIO_Init+0x138>)
 80007f6:	f001 f917 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007fa:	2340      	movs	r3, #64	@ 0x40
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <MX_GPIO_Init+0x13c>)
 8000812:	f001 f909 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000816:	2380      	movs	r3, #128	@ 0x80
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_GPIO_Init+0x13c>)
 800082a:	f001 f8fd 	bl	8001a28 <HAL_GPIO_Init>

}
 800082e:	bf00      	nop
 8000830:	3730      	adds	r7, #48	@ 0x30
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40020400 	.word	0x40020400
 8000840:	40021800 	.word	0x40021800
 8000844:	40020800 	.word	0x40020800

08000848 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_I2C1_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <MX_I2C1_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	@ (80008c4 <MX_I2C1_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_I2C1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000884:	f001 fc6c 	bl	8002160 <HAL_I2C_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 f909 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4809      	ldr	r0, [pc, #36]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000896:	f001 fd91 	bl	80023bc <HAL_I2CEx_ConfigAnalogFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 f900 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_I2C1_Init+0x74>)
 80008a8:	f001 fdfe 	bl	80024a8 <HAL_I2CEx_ConfigDigitalFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 f8f7 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000258 	.word	0x20000258
 80008c0:	40005400 	.word	0x40005400
 80008c4:	00808cd2 	.word	0x00808cd2

080008c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b0aa      	sub	sp, #168	@ 0xa8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	2284      	movs	r2, #132	@ 0x84
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f006 f9ba 	bl	8006c62 <memset>
  if(i2cHandle->Instance==I2C1)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a22      	ldr	r2, [pc, #136]	@ (800097c <HAL_I2C_MspInit+0xb4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d13c      	bne.n	8000972 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008fe:	2300      	movs	r3, #0
 8000900:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fdda 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000912:	f000 f8c7 	bl	8000aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_I2C_MspInit+0xb8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a19      	ldr	r2, [pc, #100]	@ (8000980 <HAL_I2C_MspInit+0xb8>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_I2C_MspInit+0xb8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800092e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000932:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000936:	2312      	movs	r3, #18
 8000938:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000948:	2304      	movs	r3, #4
 800094a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000952:	4619      	mov	r1, r3
 8000954:	480b      	ldr	r0, [pc, #44]	@ (8000984 <HAL_I2C_MspInit+0xbc>)
 8000956:	f001 f867 	bl	8001a28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <HAL_I2C_MspInit+0xb8>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	@ (8000980 <HAL_I2C_MspInit+0xb8>)
 8000960:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_I2C_MspInit+0xb8>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000972:	bf00      	nop
 8000974:	37a8      	adds	r7, #168	@ 0xa8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40005400 	.word	0x40005400
 8000980:	40023800 	.word	0x40023800
 8000984:	40020400 	.word	0x40020400

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098c:	f000 fb73 	bl	8001076 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000990:	f000 f820 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000994:	f7ff feb6 	bl	8000704 <MX_GPIO_Init>
  MX_ETH_Init();
 8000998:	f7ff fdae 	bl	80004f8 <MX_ETH_Init>
  MX_I2C1_Init();
 800099c:	f7ff ff54 	bl	8000848 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80009a0:	f000 fa08 	bl	8000db4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009a4:	f000 fa96 	bl	8000ed4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80009a8:	f000 f8f4 	bl	8000b94 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009ac:	2100      	movs	r1, #0
 80009ae:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <main+0x48>)
 80009b0:	f003 fe8a 	bl	80046c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009b4:	2104      	movs	r1, #4
 80009b6:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <main+0x48>)
 80009b8:	f003 fe86 	bl	80046c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80009bc:	2108      	movs	r1, #8
 80009be:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <main+0x48>)
 80009c0:	f003 fe82 	bl	80046c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80009c4:	210c      	movs	r1, #12
 80009c6:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <main+0x48>)
 80009c8:	f003 fe7e 	bl	80046c8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <main+0x44>
 80009d0:	200002ac 	.word	0x200002ac

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	@ 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2230      	movs	r2, #48	@ 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f006 f93d 	bl	8006c62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009f8:	f001 ff16 	bl	8002828 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	4b27      	ldr	r3, [pc, #156]	@ (8000a9c <SystemClock_Config+0xc8>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a00:	4a26      	ldr	r2, [pc, #152]	@ (8000a9c <SystemClock_Config+0xc8>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a08:	4b24      	ldr	r3, [pc, #144]	@ (8000a9c <SystemClock_Config+0xc8>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a14:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a1c:	4a20      	ldr	r2, [pc, #128]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <SystemClock_Config+0xcc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a30:	2301      	movs	r3, #1
 8000a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a34:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a48:	2348      	movs	r3, #72	@ 0x48
 8000a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a50:	2303      	movs	r3, #3
 8000a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fef5 	bl	8002848 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a64:	f000 f81e 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	2102      	movs	r1, #2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 fa39 	bl	8002efc <HAL_RCC_ClockConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a90:	f000 f808 	bl	8000aa4 <Error_Handler>
  }
}
 8000a94:	bf00      	nop
 8000a96:	3750      	adds	r7, #80	@ 0x50
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <Error_Handler+0x8>

08000ab0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <NMI_Handler+0x4>

08000b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <MemManage_Handler+0x4>

08000b28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b66:	f000 fac3 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb8:	4b32      	ldr	r3, [pc, #200]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000bba:	4a33      	ldr	r2, [pc, #204]	@ (8000c88 <MX_TIM3_Init+0xf4>)
 8000bbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000bbe:	4b31      	ldr	r3, [pc, #196]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000bc0:	2247      	movs	r2, #71	@ 0x47
 8000bc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000bcc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000bda:	2280      	movs	r2, #128	@ 0x80
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bde:	4829      	ldr	r0, [pc, #164]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000be0:	f003 fc52 	bl	8004488 <HAL_TIM_PWM_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000bea:	f7ff ff5b 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4821      	ldr	r0, [pc, #132]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000bfe:	f004 fdb3 	bl	8005768 <HAL_TIMEx_MasterConfigSynchronization>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c08:	f7ff ff4c 	bl	8000aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0c:	2360      	movs	r3, #96	@ 0x60
 8000c0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	4818      	ldr	r0, [pc, #96]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000c24:	f003 ff1a 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c2e:	f7ff ff39 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	2204      	movs	r2, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4812      	ldr	r0, [pc, #72]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000c3a:	f003 ff0f 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c44:	f7ff ff2e 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000c50:	f003 ff04 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000c5a:	f7ff ff23 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	220c      	movs	r2, #12
 8000c62:	4619      	mov	r1, r3
 8000c64:	4807      	ldr	r0, [pc, #28]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000c66:	f003 fef9 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000c70:	f7ff ff18 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c74:	4803      	ldr	r0, [pc, #12]	@ (8000c84 <MX_TIM3_Init+0xf0>)
 8000c76:	f000 f829 	bl	8000ccc <HAL_TIM_MspPostInit>

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	@ 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200002ac 	.word	0x200002ac
 8000c88:	40000400 	.word	0x40000400

08000c8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_TIM_PWM_MspInit+0x38>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a09      	ldr	r2, [pc, #36]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40000400 	.word	0x40000400
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a2d      	ldr	r2, [pc, #180]	@ (8000da0 <HAL_TIM_MspPostInit+0xd4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d154      	bne.n	8000d98 <HAL_TIM_MspPostInit+0xcc>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b2d      	ldr	r3, [pc, #180]	@ (8000da4 <HAL_TIM_MspPostInit+0xd8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a2c      	ldr	r2, [pc, #176]	@ (8000da4 <HAL_TIM_MspPostInit+0xd8>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <HAL_TIM_MspPostInit+0xd8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <HAL_TIM_MspPostInit+0xd8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a26      	ldr	r2, [pc, #152]	@ (8000da4 <HAL_TIM_MspPostInit+0xd8>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <HAL_TIM_MspPostInit+0xd8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <HAL_TIM_MspPostInit+0xd8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a20      	ldr	r2, [pc, #128]	@ (8000da4 <HAL_TIM_MspPostInit+0xd8>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <HAL_TIM_MspPostInit+0xd8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d36:	2340      	movs	r3, #64	@ 0x40
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d46:	2302      	movs	r3, #2
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4815      	ldr	r0, [pc, #84]	@ (8000da8 <HAL_TIM_MspPostInit+0xdc>)
 8000d52:	f000 fe69 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d56:	2302      	movs	r3, #2
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d66:	2302      	movs	r3, #2
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480e      	ldr	r0, [pc, #56]	@ (8000dac <HAL_TIM_MspPostInit+0xe0>)
 8000d72:	f000 fe59 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d76:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4807      	ldr	r0, [pc, #28]	@ (8000db0 <HAL_TIM_MspPostInit+0xe4>)
 8000d94:	f000 fe48 	bl	8001a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	@ 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40000400 	.word	0x40000400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40020400 	.word	0x40020400
 8000db0:	40020800 	.word	0x40020800

08000db4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dba:	4a15      	ldr	r2, [pc, #84]	@ (8000e10 <MX_USART3_UART_Init+0x5c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000df8:	f004 fe0e 	bl	8005a18 <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e02:	f7ff fe4f 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200002f8 	.word	0x200002f8
 8000e10:	40004800 	.word	0x40004800

08000e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0aa      	sub	sp, #168	@ 0xa8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	2284      	movs	r2, #132	@ 0x84
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f005 ff14 	bl	8006c62 <memset>
  if(uartHandle->Instance==USART3)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a22      	ldr	r2, [pc, #136]	@ (8000ec8 <HAL_UART_MspInit+0xb4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d13c      	bne.n	8000ebe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e48:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fb34 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e5e:	f7ff fe21 	bl	8000aa4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <HAL_UART_MspInit+0xb8>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	4a19      	ldr	r2, [pc, #100]	@ (8000ecc <HAL_UART_MspInit+0xb8>)
 8000e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <HAL_UART_MspInit+0xb8>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <HAL_UART_MspInit+0xb8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a13      	ldr	r2, [pc, #76]	@ (8000ecc <HAL_UART_MspInit+0xb8>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_UART_MspInit+0xb8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eac:	2307      	movs	r3, #7
 8000eae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <HAL_UART_MspInit+0xbc>)
 8000eba:	f000 fdb5 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	37a8      	adds	r7, #168	@ 0xa8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40004800 	.word	0x40004800
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020c00 	.word	0x40020c00

08000ed4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eda:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ede:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee2:	2206      	movs	r2, #6
 8000ee4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee8:	2202      	movs	r2, #2
 8000eea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f18:	f001 fb3a 	bl	8002590 <HAL_PCD_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f22:	f7ff fdbf 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000380 	.word	0x20000380

08000f30 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0ac      	sub	sp, #176	@ 0xb0
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	2284      	movs	r2, #132	@ 0x84
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 fe86 	bl	8006c62 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f5e:	d159      	bne.n	8001014 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f64:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 faa5 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f7c:	f7ff fd92 	bl	8000aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b26      	ldr	r3, [pc, #152]	@ (800101c <HAL_PCD_MspInit+0xec>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	4a25      	ldr	r2, [pc, #148]	@ (800101c <HAL_PCD_MspInit+0xec>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8c:	4b23      	ldr	r3, [pc, #140]	@ (800101c <HAL_PCD_MspInit+0xec>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f98:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4818      	ldr	r0, [pc, #96]	@ (8001020 <HAL_PCD_MspInit+0xf0>)
 8000fc0:	f000 fd32 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4810      	ldr	r0, [pc, #64]	@ (8001020 <HAL_PCD_MspInit+0xf0>)
 8000fe0:	f000 fd22 	bl	8001a28 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <HAL_PCD_MspInit+0xec>)
 8000fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800101c <HAL_PCD_MspInit+0xec>)
 8000fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fee:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_PCD_MspInit+0xec>)
 8000ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <HAL_PCD_MspInit+0xec>)
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001000:	4a06      	ldr	r2, [pc, #24]	@ (800101c <HAL_PCD_MspInit+0xec>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001006:	6453      	str	r3, [r2, #68]	@ 0x44
 8001008:	4b04      	ldr	r3, [pc, #16]	@ (800101c <HAL_PCD_MspInit+0xec>)
 800100a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001014:	bf00      	nop
 8001016:	37b0      	adds	r7, #176	@ 0xb0
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800105c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001028:	f7ff fda2 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	@ (8001060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	@ (8001064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	@ (8001070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001052:	f005 fe0f 	bl	8006c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fc97 	bl	8000988 <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001068:	08006f44 	.word	0x08006f44
  ldr r2, =_sbss
 800106c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001070:	20000864 	.word	0x20000864

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>

08001076 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107a:	2003      	movs	r0, #3
 800107c:	f000 f92e 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001080:	2000      	movs	r0, #0
 8001082:	f000 f805 	bl	8001090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001086:	f7ff fd1f 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <HAL_InitTick+0x54>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_InitTick+0x58>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f960 	bl	8001374 <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00e      	b.n	80010dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d80a      	bhi.n	80010da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f926 	bl	800131c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4a06      	ldr	r2, [pc, #24]	@ (80010ec <HAL_InitTick+0x5c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	20000860 	.word	0x20000860

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000860 	.word	0x20000860

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffde 	bl	8001118 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00
 80011bc:	05fa0000 	.word	0x05fa0000

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	@ (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	@ (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b07      	cmp	r3, #7
 80012e8:	d00f      	beq.n	800130a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b06      	cmp	r3, #6
 80012ee:	d00c      	beq.n	800130a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d009      	beq.n	800130a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d006      	beq.n	800130a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d003      	beq.n	800130a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001302:	2191      	movs	r1, #145	@ 0x91
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001306:	f7ff fbd3 	bl	8000ab0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ff34 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	08006cd4 	.word	0x08006cd4

0800131c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d903      	bls.n	800133c <HAL_NVIC_SetPriority+0x20>
 8001334:	21a9      	movs	r1, #169	@ 0xa9
 8001336:	480e      	ldr	r0, [pc, #56]	@ (8001370 <HAL_NVIC_SetPriority+0x54>)
 8001338:	f7ff fbba 	bl	8000ab0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	d903      	bls.n	800134a <HAL_NVIC_SetPriority+0x2e>
 8001342:	21aa      	movs	r1, #170	@ 0xaa
 8001344:	480a      	ldr	r0, [pc, #40]	@ (8001370 <HAL_NVIC_SetPriority+0x54>)
 8001346:	f7ff fbb3 	bl	8000ab0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134a:	f7ff ff39 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 800134e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	6978      	ldr	r0, [r7, #20]
 8001356:	f7ff ff6b 	bl	8001230 <NVIC_EncodePriority>
 800135a:	4602      	mov	r2, r0
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff3a 	bl	80011dc <__NVIC_SetPriority>
}
 8001368:	bf00      	nop
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	08006cd4 	.word	0x08006cd4

08001374 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff8b 	bl	8001298 <SysTick_Config>
 8001382:	4603      	mov	r3, r0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e086      	b.n	80014ac <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d106      	bne.n	80013b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2223      	movs	r2, #35	@ 0x23
 80013ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff f8ef 	bl	8000594 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <HAL_ETH_Init+0x128>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	4a3e      	ldr	r2, [pc, #248]	@ (80014b4 <HAL_ETH_Init+0x128>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c2:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <HAL_ETH_Init+0x128>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013ce:	4b3a      	ldr	r3, [pc, #232]	@ (80014b8 <HAL_ETH_Init+0x12c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a39      	ldr	r2, [pc, #228]	@ (80014b8 <HAL_ETH_Init+0x12c>)
 80013d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80013d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013da:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <HAL_ETH_Init+0x12c>)
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	4935      	ldr	r1, [pc, #212]	@ (80014b8 <HAL_ETH_Init+0x12c>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013e8:	4b33      	ldr	r3, [pc, #204]	@ (80014b8 <HAL_ETH_Init+0x12c>)
 80013ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001402:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001404:	f7ff fe88 	bl	8001118 <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800140a:	e011      	b.n	8001430 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800140c:	f7ff fe84 	bl	8001118 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800141a:	d909      	bls.n	8001430 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2204      	movs	r2, #4
 8001420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	22e0      	movs	r2, #224	@ 0xe0
 8001428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e03d      	b.n	80014ac <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1e4      	bne.n	800140c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f97a 	bl	800173c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fa25 	bl	8001898 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 fa7b 	bl	800194a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	461a      	mov	r2, r3
 800145a:	2100      	movs	r1, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f9e3 	bl	8001828 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001470:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_ETH_Init+0x130>)
 8001480:	430b      	orrs	r3, r1
 8001482:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001496:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2210      	movs	r2, #16
 80014a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800
 80014bc:	00020060 	.word	0x00020060

080014c0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4b53      	ldr	r3, [pc, #332]	@ (8001624 <ETH_SetMACConfig+0x164>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	7b9b      	ldrb	r3, [r3, #14]
 80014de:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	7c12      	ldrb	r2, [r2, #16]
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	d102      	bne.n	80014ee <ETH_SetMACConfig+0x2e>
 80014e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014ec:	e000      	b.n	80014f0 <ETH_SetMACConfig+0x30>
 80014ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	7c52      	ldrb	r2, [r2, #17]
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	d102      	bne.n	8001500 <ETH_SetMACConfig+0x40>
 80014fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014fe:	e000      	b.n	8001502 <ETH_SetMACConfig+0x42>
 8001500:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001502:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001508:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	7fdb      	ldrb	r3, [r3, #31]
 800150e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001510:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001516:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	7f92      	ldrb	r2, [r2, #30]
 800151c:	2a00      	cmp	r2, #0
 800151e:	d102      	bne.n	8001526 <ETH_SetMACConfig+0x66>
 8001520:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001524:	e000      	b.n	8001528 <ETH_SetMACConfig+0x68>
 8001526:	2200      	movs	r2, #0
                        macconf->Speed |
 8001528:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	7f1b      	ldrb	r3, [r3, #28]
 800152e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001530:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001536:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	791b      	ldrb	r3, [r3, #4]
 800153c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800153e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001546:	2a00      	cmp	r2, #0
 8001548:	d102      	bne.n	8001550 <ETH_SetMACConfig+0x90>
 800154a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800154e:	e000      	b.n	8001552 <ETH_SetMACConfig+0x92>
 8001550:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001552:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	7bdb      	ldrb	r3, [r3, #15]
 8001558:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800155a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001560:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001568:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800156a:	4313      	orrs	r3, r2
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fdd4 	bl	8001130 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800159e:	4013      	ands	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80015ae:	2a00      	cmp	r2, #0
 80015b0:	d101      	bne.n	80015b6 <ETH_SetMACConfig+0xf6>
 80015b2:	2280      	movs	r2, #128	@ 0x80
 80015b4:	e000      	b.n	80015b8 <ETH_SetMACConfig+0xf8>
 80015b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80015c6:	2a01      	cmp	r2, #1
 80015c8:	d101      	bne.n	80015ce <ETH_SetMACConfig+0x10e>
 80015ca:	2208      	movs	r2, #8
 80015cc:	e000      	b.n	80015d0 <ETH_SetMACConfig+0x110>
 80015ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80015d8:	2a01      	cmp	r2, #1
 80015da:	d101      	bne.n	80015e0 <ETH_SetMACConfig+0x120>
 80015dc:	2204      	movs	r2, #4
 80015de:	e000      	b.n	80015e2 <ETH_SetMACConfig+0x122>
 80015e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80015ea:	2a01      	cmp	r2, #1
 80015ec:	d101      	bne.n	80015f2 <ETH_SetMACConfig+0x132>
 80015ee:	2202      	movs	r2, #2
 80015f0:	e000      	b.n	80015f4 <ETH_SetMACConfig+0x134>
 80015f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015f4:	4313      	orrs	r3, r2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff fd8f 	bl	8001130 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	619a      	str	r2, [r3, #24]
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	fd20810f 	.word	0xfd20810f

08001628 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4b3d      	ldr	r3, [pc, #244]	@ (8001738 <ETH_SetDMAConfig+0x110>)
 8001642:	4013      	ands	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	7b1b      	ldrb	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <ETH_SetDMAConfig+0x2c>
 800164e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001652:	e000      	b.n	8001656 <ETH_SetDMAConfig+0x2e>
 8001654:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	7b5b      	ldrb	r3, [r3, #13]
 800165a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800165c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	7f52      	ldrb	r2, [r2, #29]
 8001662:	2a00      	cmp	r2, #0
 8001664:	d102      	bne.n	800166c <ETH_SetDMAConfig+0x44>
 8001666:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800166a:	e000      	b.n	800166e <ETH_SetDMAConfig+0x46>
 800166c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800166e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	7b9b      	ldrb	r3, [r3, #14]
 8001674:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001676:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800167c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	7f1b      	ldrb	r3, [r3, #28]
 8001682:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001684:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	7f9b      	ldrb	r3, [r3, #30]
 800168a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800168c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001692:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800169a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800169c:	4313      	orrs	r3, r2
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ac:	461a      	mov	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff fd36 	bl	8001130 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016cc:	461a      	mov	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	791b      	ldrb	r3, [r3, #4]
 80016d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001700:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800170a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800170e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff fd07 	bl	8001130 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	f8de3f23 	.word	0xf8de3f23

0800173c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0a6      	sub	sp, #152	@ 0x98
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001744:	2301      	movs	r3, #1
 8001746:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800174a:	2301      	movs	r3, #1
 800174c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001750:	2300      	movs	r3, #0
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800176c:	2301      	movs	r3, #1
 800176e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800177e:	2300      	movs	r3, #0
 8001780:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001788:	2300      	movs	r3, #0
 800178a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017ba:	4619      	mov	r1, r3
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff fe7f 	bl	80014c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017fc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001802:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001804:	2301      	movs	r3, #1
 8001806:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800180a:	2300      	movs	r3, #0
 800180c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4619      	mov	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff05 	bl	8001628 <ETH_SetDMAConfig>
}
 800181e:	bf00      	nop
 8001820:	3798      	adds	r7, #152	@ 0x98
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3305      	adds	r3, #5
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	3204      	adds	r2, #4
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <ETH_MACAddressConfig+0x68>)
 800184a:	4413      	add	r3, r2
 800184c:	461a      	mov	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3303      	adds	r3, #3
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	061a      	lsls	r2, r3, #24
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3302      	adds	r3, #2
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	041b      	lsls	r3, r3, #16
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3301      	adds	r3, #1
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	4313      	orrs	r3, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <ETH_MACAddressConfig+0x6c>)
 800187a:	4413      	add	r3, r2
 800187c:	461a      	mov	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	6013      	str	r3, [r2, #0]
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40028040 	.word	0x40028040
 8001894:	40028044 	.word	0x40028044

08001898 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e03e      	b.n	8001924 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68d9      	ldr	r1, [r3, #12]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	3206      	adds	r2, #6
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d80c      	bhi.n	8001908 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68d9      	ldr	r1, [r3, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	e004      	b.n	8001912 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	461a      	mov	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d9bd      	bls.n	80018a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800193c:	611a      	str	r2, [r3, #16]
}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e048      	b.n	80019ea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6919      	ldr	r1, [r3, #16]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2200      	movs	r2, #0
 8001974:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001994:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	3212      	adds	r2, #18
 80019b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d80c      	bhi.n	80019da <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6919      	ldr	r1, [r3, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	440b      	add	r3, r1
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	e004      	b.n	80019e4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	461a      	mov	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3301      	adds	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d9b3      	bls.n	8001958 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a1a:	60da      	str	r2, [r3, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a3a      	ldr	r2, [pc, #232]	@ (8001b30 <HAL_GPIO_Init+0x108>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d02b      	beq.n	8001aa2 <HAL_GPIO_Init+0x7a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a39      	ldr	r2, [pc, #228]	@ (8001b34 <HAL_GPIO_Init+0x10c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d027      	beq.n	8001aa2 <HAL_GPIO_Init+0x7a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a38      	ldr	r2, [pc, #224]	@ (8001b38 <HAL_GPIO_Init+0x110>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d023      	beq.n	8001aa2 <HAL_GPIO_Init+0x7a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a37      	ldr	r2, [pc, #220]	@ (8001b3c <HAL_GPIO_Init+0x114>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01f      	beq.n	8001aa2 <HAL_GPIO_Init+0x7a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a36      	ldr	r2, [pc, #216]	@ (8001b40 <HAL_GPIO_Init+0x118>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01b      	beq.n	8001aa2 <HAL_GPIO_Init+0x7a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a35      	ldr	r2, [pc, #212]	@ (8001b44 <HAL_GPIO_Init+0x11c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d017      	beq.n	8001aa2 <HAL_GPIO_Init+0x7a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a34      	ldr	r2, [pc, #208]	@ (8001b48 <HAL_GPIO_Init+0x120>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x7a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a33      	ldr	r2, [pc, #204]	@ (8001b4c <HAL_GPIO_Init+0x124>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00f      	beq.n	8001aa2 <HAL_GPIO_Init+0x7a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a32      	ldr	r2, [pc, #200]	@ (8001b50 <HAL_GPIO_Init+0x128>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00b      	beq.n	8001aa2 <HAL_GPIO_Init+0x7a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a31      	ldr	r2, [pc, #196]	@ (8001b54 <HAL_GPIO_Init+0x12c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x7a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a30      	ldr	r2, [pc, #192]	@ (8001b58 <HAL_GPIO_Init+0x130>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x7a>
 8001a9a:	21aa      	movs	r1, #170	@ 0xaa
 8001a9c:	482f      	ldr	r0, [pc, #188]	@ (8001b5c <HAL_GPIO_Init+0x134>)
 8001a9e:	f7ff f807 	bl	8000ab0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d103      	bne.n	8001ab4 <HAL_GPIO_Init+0x8c>
 8001aac:	21ab      	movs	r1, #171	@ 0xab
 8001aae:	482b      	ldr	r0, [pc, #172]	@ (8001b5c <HAL_GPIO_Init+0x134>)
 8001ab0:	f7fe fffe 	bl	8000ab0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d035      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d031      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b11      	cmp	r3, #17
 8001aca:	d02d      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d029      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b12      	cmp	r3, #18
 8001ada:	d025      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001ae4:	d020      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001aee:	d01b      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001af8:	d016      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001b02:	d011      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8001b0c:	d00c      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x100>
 8001b20:	21ac      	movs	r1, #172	@ 0xac
 8001b22:	480e      	ldr	r0, [pc, #56]	@ (8001b5c <HAL_GPIO_Init+0x134>)
 8001b24:	f7fe ffc4 	bl	8000ab0 <assert_failed>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	e2c7      	b.n	80020be <HAL_GPIO_Init+0x696>
 8001b2e:	bf00      	nop
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40021400 	.word	0x40021400
 8001b48:	40021800 	.word	0x40021800
 8001b4c:	40021c00 	.word	0x40021c00
 8001b50:	40022000 	.word	0x40022000
 8001b54:	40022400 	.word	0x40022400
 8001b58:	40022800 	.word	0x40022800
 8001b5c:	08006d10 	.word	0x08006d10
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 829d 	bne.w	80020b8 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d005      	beq.n	8001b96 <HAL_GPIO_Init+0x16e>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d144      	bne.n	8001c20 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00f      	beq.n	8001bbe <HAL_GPIO_Init+0x196>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d00b      	beq.n	8001bbe <HAL_GPIO_Init+0x196>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x196>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x196>
 8001bb6:	21bd      	movs	r1, #189	@ 0xbd
 8001bb8:	4831      	ldr	r0, [pc, #196]	@ (8001c80 <HAL_GPIO_Init+0x258>)
 8001bba:	f7fe ff79 	bl	8000ab0 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 0201 	and.w	r2, r3, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d02b      	beq.n	8001c84 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00b      	beq.n	8001c4c <HAL_GPIO_Init+0x224>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d007      	beq.n	8001c4c <HAL_GPIO_Init+0x224>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x224>
 8001c44:	21ce      	movs	r1, #206	@ 0xce
 8001c46:	480e      	ldr	r0, [pc, #56]	@ (8001c80 <HAL_GPIO_Init+0x258>)
 8001c48:	f7fe ff32 	bl	8000ab0 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x25c>
 8001c7e:	bf00      	nop
 8001c80:	08006d10 	.word	0x08006d10
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	f040 8134 	bne.w	8001efa <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 810b 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	f000 8106 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8101 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80fc 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 80f7 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	f000 80f2 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	f000 80ed 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	f000 80e8 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	f000 80e3 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	f000 80de 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	f000 80d9 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	f000 80d4 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	f000 80cf 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	f000 80ca 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	f000 80c5 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	f000 80c0 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	f000 80bb 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	f000 80b6 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	f000 80b1 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	f000 80ac 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	f000 80a7 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	f000 80a2 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	f000 809d 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	f000 8098 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	f000 8093 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	f000 808e 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	f000 8089 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b06      	cmp	r3, #6
 8001da6:	f000 8084 	beq.w	8001eb2 <HAL_GPIO_Init+0x48a>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b07      	cmp	r3, #7
 8001db0:	d07f      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b07      	cmp	r3, #7
 8001db8:	d07b      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b07      	cmp	r3, #7
 8001dc0:	d077      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b07      	cmp	r3, #7
 8001dc8:	d073      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b07      	cmp	r3, #7
 8001dd0:	d06f      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b07      	cmp	r3, #7
 8001dd8:	d06b      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b07      	cmp	r3, #7
 8001de0:	d067      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d063      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d05f      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d05b      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d057      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d053      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d04f      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d04b      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b09      	cmp	r3, #9
 8001e20:	d047      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b09      	cmp	r3, #9
 8001e28:	d043      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	d03f      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b09      	cmp	r3, #9
 8001e38:	d03b      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b09      	cmp	r3, #9
 8001e40:	d037      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b09      	cmp	r3, #9
 8001e48:	d033      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b09      	cmp	r3, #9
 8001e50:	d02f      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b0a      	cmp	r3, #10
 8001e58:	d02b      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b0a      	cmp	r3, #10
 8001e60:	d027      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2b0a      	cmp	r3, #10
 8001e68:	d023      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b0a      	cmp	r3, #10
 8001e70:	d01f      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b0b      	cmp	r3, #11
 8001e78:	d01b      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d017      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d00f      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	d00b      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	2b0d      	cmp	r3, #13
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b0e      	cmp	r3, #14
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x48a>
 8001eaa:	21db      	movs	r1, #219	@ 0xdb
 8001eac:	4888      	ldr	r0, [pc, #544]	@ (80020d0 <HAL_GPIO_Init+0x6a8>)
 8001eae:	f7fe fdff 	bl	8000ab0 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	69b9      	ldr	r1, [r7, #24]
 8001ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0203 	and.w	r2, r3, #3
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80be 	beq.w	80020b8 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3c:	4b65      	ldr	r3, [pc, #404]	@ (80020d4 <HAL_GPIO_Init+0x6ac>)
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f40:	4a64      	ldr	r2, [pc, #400]	@ (80020d4 <HAL_GPIO_Init+0x6ac>)
 8001f42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f46:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f48:	4b62      	ldr	r3, [pc, #392]	@ (80020d4 <HAL_GPIO_Init+0x6ac>)
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f54:	4a60      	ldr	r2, [pc, #384]	@ (80020d8 <HAL_GPIO_Init+0x6b0>)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a58      	ldr	r2, [pc, #352]	@ (80020dc <HAL_GPIO_Init+0x6b4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d037      	beq.n	8001ff0 <HAL_GPIO_Init+0x5c8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a57      	ldr	r2, [pc, #348]	@ (80020e0 <HAL_GPIO_Init+0x6b8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d031      	beq.n	8001fec <HAL_GPIO_Init+0x5c4>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a56      	ldr	r2, [pc, #344]	@ (80020e4 <HAL_GPIO_Init+0x6bc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d02b      	beq.n	8001fe8 <HAL_GPIO_Init+0x5c0>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a55      	ldr	r2, [pc, #340]	@ (80020e8 <HAL_GPIO_Init+0x6c0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d025      	beq.n	8001fe4 <HAL_GPIO_Init+0x5bc>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a54      	ldr	r2, [pc, #336]	@ (80020ec <HAL_GPIO_Init+0x6c4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d01f      	beq.n	8001fe0 <HAL_GPIO_Init+0x5b8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a53      	ldr	r2, [pc, #332]	@ (80020f0 <HAL_GPIO_Init+0x6c8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d019      	beq.n	8001fdc <HAL_GPIO_Init+0x5b4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a52      	ldr	r2, [pc, #328]	@ (80020f4 <HAL_GPIO_Init+0x6cc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <HAL_GPIO_Init+0x5b0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a51      	ldr	r2, [pc, #324]	@ (80020f8 <HAL_GPIO_Init+0x6d0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_GPIO_Init+0x5ac>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a50      	ldr	r2, [pc, #320]	@ (80020fc <HAL_GPIO_Init+0x6d4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <HAL_GPIO_Init+0x5a8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a4f      	ldr	r2, [pc, #316]	@ (8002100 <HAL_GPIO_Init+0x6d8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_GPIO_Init+0x5a4>
 8001fc8:	2309      	movs	r3, #9
 8001fca:	e012      	b.n	8001ff2 <HAL_GPIO_Init+0x5ca>
 8001fcc:	230a      	movs	r3, #10
 8001fce:	e010      	b.n	8001ff2 <HAL_GPIO_Init+0x5ca>
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	e00e      	b.n	8001ff2 <HAL_GPIO_Init+0x5ca>
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	e00c      	b.n	8001ff2 <HAL_GPIO_Init+0x5ca>
 8001fd8:	2306      	movs	r3, #6
 8001fda:	e00a      	b.n	8001ff2 <HAL_GPIO_Init+0x5ca>
 8001fdc:	2305      	movs	r3, #5
 8001fde:	e008      	b.n	8001ff2 <HAL_GPIO_Init+0x5ca>
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	e006      	b.n	8001ff2 <HAL_GPIO_Init+0x5ca>
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e004      	b.n	8001ff2 <HAL_GPIO_Init+0x5ca>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e002      	b.n	8001ff2 <HAL_GPIO_Init+0x5ca>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_GPIO_Init+0x5ca>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	f002 0203 	and.w	r2, r2, #3
 8001ff8:	0092      	lsls	r2, r2, #2
 8001ffa:	4093      	lsls	r3, r2
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002002:	4935      	ldr	r1, [pc, #212]	@ (80020d8 <HAL_GPIO_Init+0x6b0>)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002010:	4b3c      	ldr	r3, [pc, #240]	@ (8002104 <HAL_GPIO_Init+0x6dc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002034:	4a33      	ldr	r2, [pc, #204]	@ (8002104 <HAL_GPIO_Init+0x6dc>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800203a:	4b32      	ldr	r3, [pc, #200]	@ (8002104 <HAL_GPIO_Init+0x6dc>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800205e:	4a29      	ldr	r2, [pc, #164]	@ (8002104 <HAL_GPIO_Init+0x6dc>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002064:	4b27      	ldr	r3, [pc, #156]	@ (8002104 <HAL_GPIO_Init+0x6dc>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002088:	4a1e      	ldr	r2, [pc, #120]	@ (8002104 <HAL_GPIO_Init+0x6dc>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800208e:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <HAL_GPIO_Init+0x6dc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b2:	4a14      	ldr	r2, [pc, #80]	@ (8002104 <HAL_GPIO_Init+0x6dc>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	3301      	adds	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	f67f ad4d 	bls.w	8001b60 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 80020c6:	bf00      	nop
 80020c8:	bf00      	nop
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	08006d10 	.word	0x08006d10
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40013800 	.word	0x40013800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40020800 	.word	0x40020800
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40021400 	.word	0x40021400
 80020f4:	40021800 	.word	0x40021800
 80020f8:	40021c00 	.word	0x40021c00
 80020fc:	40022000 	.word	0x40022000
 8002100:	40022400 	.word	0x40022400
 8002104:	40013c00 	.word	0x40013c00

08002108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]
 8002114:	4613      	mov	r3, r2
 8002116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d104      	bne.n	8002128 <HAL_GPIO_WritePin+0x20>
 800211e:	f240 1197 	movw	r1, #407	@ 0x197
 8002122:	480e      	ldr	r0, [pc, #56]	@ (800215c <HAL_GPIO_WritePin+0x54>)
 8002124:	f7fe fcc4 	bl	8000ab0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_GPIO_WritePin+0x36>
 800212e:	787b      	ldrb	r3, [r7, #1]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d004      	beq.n	800213e <HAL_GPIO_WritePin+0x36>
 8002134:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8002138:	4808      	ldr	r0, [pc, #32]	@ (800215c <HAL_GPIO_WritePin+0x54>)
 800213a:	f7fe fcb9 	bl	8000ab0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800213e:	787b      	ldrb	r3, [r7, #1]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002144:	887a      	ldrh	r2, [r7, #2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800214a:	e003      	b.n	8002154 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	041a      	lsls	r2, r3, #16
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	08006d10 	.word	0x08006d10

08002160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e113      	b.n	800239a <HAL_I2C_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a8b      	ldr	r2, [pc, #556]	@ (80023a4 <HAL_I2C_Init+0x244>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d013      	beq.n	80021a4 <HAL_I2C_Init+0x44>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a89      	ldr	r2, [pc, #548]	@ (80023a8 <HAL_I2C_Init+0x248>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00e      	beq.n	80021a4 <HAL_I2C_Init+0x44>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a88      	ldr	r2, [pc, #544]	@ (80023ac <HAL_I2C_Init+0x24c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d009      	beq.n	80021a4 <HAL_I2C_Init+0x44>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a86      	ldr	r2, [pc, #536]	@ (80023b0 <HAL_I2C_Init+0x250>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d004      	beq.n	80021a4 <HAL_I2C_Init+0x44>
 800219a:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800219e:	4885      	ldr	r0, [pc, #532]	@ (80023b4 <HAL_I2C_Init+0x254>)
 80021a0:	f7fe fc86 	bl	8000ab0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ac:	d304      	bcc.n	80021b8 <HAL_I2C_Init+0x58>
 80021ae:	f240 2121 	movw	r1, #545	@ 0x221
 80021b2:	4880      	ldr	r0, [pc, #512]	@ (80023b4 <HAL_I2C_Init+0x254>)
 80021b4:	f7fe fc7c 	bl	8000ab0 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d008      	beq.n	80021d2 <HAL_I2C_Init+0x72>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d004      	beq.n	80021d2 <HAL_I2C_Init+0x72>
 80021c8:	f240 2122 	movw	r1, #546	@ 0x222
 80021cc:	4879      	ldr	r0, [pc, #484]	@ (80023b4 <HAL_I2C_Init+0x254>)
 80021ce:	f7fe fc6f 	bl	8000ab0 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_I2C_Init+0x8e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021e2:	d004      	beq.n	80021ee <HAL_I2C_Init+0x8e>
 80021e4:	f240 2123 	movw	r1, #547	@ 0x223
 80021e8:	4872      	ldr	r0, [pc, #456]	@ (80023b4 <HAL_I2C_Init+0x254>)
 80021ea:	f7fe fc61 	bl	8000ab0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	2bff      	cmp	r3, #255	@ 0xff
 80021f4:	d904      	bls.n	8002200 <HAL_I2C_Init+0xa0>
 80021f6:	f44f 7109 	mov.w	r1, #548	@ 0x224
 80021fa:	486e      	ldr	r0, [pc, #440]	@ (80023b4 <HAL_I2C_Init+0x254>)
 80021fc:	f7fe fc58 	bl	8000ab0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d020      	beq.n	800224a <HAL_I2C_Init+0xea>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d01c      	beq.n	800224a <HAL_I2C_Init+0xea>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d018      	beq.n	800224a <HAL_I2C_Init+0xea>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d014      	beq.n	800224a <HAL_I2C_Init+0xea>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d010      	beq.n	800224a <HAL_I2C_Init+0xea>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d00c      	beq.n	800224a <HAL_I2C_Init+0xea>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b06      	cmp	r3, #6
 8002236:	d008      	beq.n	800224a <HAL_I2C_Init+0xea>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b07      	cmp	r3, #7
 800223e:	d004      	beq.n	800224a <HAL_I2C_Init+0xea>
 8002240:	f240 2125 	movw	r1, #549	@ 0x225
 8002244:	485b      	ldr	r0, [pc, #364]	@ (80023b4 <HAL_I2C_Init+0x254>)
 8002246:	f7fe fc33 	bl	8000ab0 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_I2C_Init+0x106>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800225a:	d004      	beq.n	8002266 <HAL_I2C_Init+0x106>
 800225c:	f240 2126 	movw	r1, #550	@ 0x226
 8002260:	4854      	ldr	r0, [pc, #336]	@ (80023b4 <HAL_I2C_Init+0x254>)
 8002262:	f7fe fc25 	bl	8000ab0 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_I2C_Init+0x122>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002276:	d004      	beq.n	8002282 <HAL_I2C_Init+0x122>
 8002278:	f240 2127 	movw	r1, #551	@ 0x227
 800227c:	484d      	ldr	r0, [pc, #308]	@ (80023b4 <HAL_I2C_Init+0x254>)
 800227e:	f7fe fc17 	bl	8000ab0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fb16 	bl	80008c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	@ 0x24
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d107      	bne.n	80022ea <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	e006      	b.n	80022f8 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80022f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d108      	bne.n	8002312 <HAL_I2C_Init+0x1b2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	e007      	b.n	8002322 <HAL_I2C_Init+0x1c2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002320:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <HAL_I2C_Init+0x258>)
 800232e:	430b      	orrs	r3, r1
 8002330:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002340:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69d9      	ldr	r1, [r3, #28]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40005400 	.word	0x40005400
 80023a8:	40005800 	.word	0x40005800
 80023ac:	40005c00 	.word	0x40005c00
 80023b0:	40006000 	.word	0x40006000
 80023b4:	08006d4c 	.word	0x08006d4c
 80023b8:	02008000 	.word	0x02008000

080023bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a32      	ldr	r2, [pc, #200]	@ (8002494 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d012      	beq.n	80023f6 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a30      	ldr	r2, [pc, #192]	@ (8002498 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2f      	ldr	r2, [pc, #188]	@ (800249c <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d008      	beq.n	80023f6 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2d      	ldr	r2, [pc, #180]	@ (80024a0 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d003      	beq.n	80023f6 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80023ee:	215e      	movs	r1, #94	@ 0x5e
 80023f0:	482c      	ldr	r0, [pc, #176]	@ (80024a4 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80023f2:	f7fe fb5d 	bl	8000ab0 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002402:	d003      	beq.n	800240c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002404:	215f      	movs	r1, #95	@ 0x5f
 8002406:	4827      	ldr	r0, [pc, #156]	@ (80024a4 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8002408:	f7fe fb52 	bl	8000ab0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b20      	cmp	r3, #32
 8002416:	d138      	bne.n	800248a <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8002422:	2302      	movs	r3, #2
 8002424:	e032      	b.n	800248c <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2224      	movs	r2, #36	@ 0x24
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002454:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40005400 	.word	0x40005400
 8002498:	40005800 	.word	0x40005800
 800249c:	40005c00 	.word	0x40005c00
 80024a0:	40006000 	.word	0x40006000
 80024a4:	08006d84 	.word	0x08006d84

080024a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a31      	ldr	r2, [pc, #196]	@ (800257c <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d012      	beq.n	80024e2 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002580 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00d      	beq.n	80024e2 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002584 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d008      	beq.n	80024e2 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002588 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d003      	beq.n	80024e2 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80024da:	218c      	movs	r1, #140	@ 0x8c
 80024dc:	482b      	ldr	r0, [pc, #172]	@ (800258c <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80024de:	f7fe fae7 	bl	8000ab0 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b0f      	cmp	r3, #15
 80024e6:	d903      	bls.n	80024f0 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 80024e8:	218d      	movs	r1, #141	@ 0x8d
 80024ea:	4828      	ldr	r0, [pc, #160]	@ (800258c <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80024ec:	f7fe fae0 	bl	8000ab0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d139      	bne.n	8002570 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8002506:	2302      	movs	r3, #2
 8002508:	e033      	b.n	8002572 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2224      	movs	r2, #36	@ 0x24
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002538:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	e000      	b.n	8002572 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002570:	2302      	movs	r3, #2
  }
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40005400 	.word	0x40005400
 8002580:	40005800 	.word	0x40005800
 8002584:	40005c00 	.word	0x40005c00
 8002588:	40006000 	.word	0x40006000
 800258c:	08006d84 	.word	0x08006d84

08002590 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af02      	add	r7, sp, #8
 8002596:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e116      	b.n	80027d0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025aa:	d008      	beq.n	80025be <HAL_PCD_Init+0x2e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a89      	ldr	r2, [pc, #548]	@ (80027d8 <HAL_PCD_Init+0x248>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d003      	beq.n	80025be <HAL_PCD_Init+0x2e>
 80025b6:	2189      	movs	r1, #137	@ 0x89
 80025b8:	4888      	ldr	r0, [pc, #544]	@ (80027dc <HAL_PCD_Init+0x24c>)
 80025ba:	f7fe fa79 	bl	8000ab0 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7fe fca9 	bl	8000f30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2203      	movs	r2, #3
 80025e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025ec:	d102      	bne.n	80025f4 <HAL_PCD_Init+0x64>
  {
    hpcd->Init.dma_enable = 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f004 f89d 	bl	8006738 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7c1a      	ldrb	r2, [r3, #16]
 8002606:	f88d 2000 	strb.w	r2, [sp]
 800260a:	3304      	adds	r3, #4
 800260c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260e:	f004 f839 	bl	8006684 <USB_CoreInit>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_PCD_Init+0x94>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0d5      	b.n	80027d0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f004 f895 	bl	800675a <USB_SetCurrentMode>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_PCD_Init+0xb2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0c6      	b.n	80027d0 <HAL_PCD_Init+0x240>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e04a      	b.n	80026de <HAL_PCD_Init+0x14e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	3315      	adds	r3, #21
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	3314      	adds	r3, #20
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	b298      	uxth	r0, r3
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	332e      	adds	r3, #46	@ 0x2e
 8002684:	4602      	mov	r2, r0
 8002686:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3318      	adds	r3, #24
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	331c      	adds	r3, #28
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3320      	adds	r3, #32
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	3324      	adds	r3, #36	@ 0x24
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	3301      	adds	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	791b      	ldrb	r3, [r3, #4]
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d3af      	bcc.n	8002648 <HAL_PCD_Init+0xb8>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]
 80026ec:	e044      	b.n	8002778 <HAL_PCD_Init+0x1e8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	3301      	adds	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	791b      	ldrb	r3, [r3, #4]
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	429a      	cmp	r2, r3
 8002780:	d3b5      	bcc.n	80026ee <HAL_PCD_Init+0x15e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7c1a      	ldrb	r2, [r3, #16]
 800278a:	f88d 2000 	strb.w	r2, [sp]
 800278e:	3304      	adds	r3, #4
 8002790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002792:	f004 f82f 	bl	80067f4 <USB_DevInit>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_PCD_Init+0x218>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e013      	b.n	80027d0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7b1b      	ldrb	r3, [r3, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d102      	bne.n	80027c4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f80e 	bl	80027e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 f9ea 	bl	8006ba2 <USB_DevDisconnect>

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40040000 	.word	0x40040000
 80027dc:	08006dc0 	.word	0x08006dc0

080027e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800280e:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_PCDEx_ActivateLPM+0x44>)
 8002810:	4313      	orrs	r3, r2
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	10000003 	.word	0x10000003

08002828 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282c:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40007000 	.word	0x40007000

08002848 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002850:	2300      	movs	r3, #0
 8002852:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e345      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b0f      	cmp	r3, #15
 8002864:	d904      	bls.n	8002870 <HAL_RCC_OscConfig+0x28>
 8002866:	f240 1163 	movw	r1, #355	@ 0x163
 800286a:	4892      	ldr	r0, [pc, #584]	@ (8002ab4 <HAL_RCC_OscConfig+0x26c>)
 800286c:	f7fe f920 	bl	8000ab0 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 809a 	beq.w	80029b2 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00e      	beq.n	80028a4 <HAL_RCC_OscConfig+0x5c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800288e:	d009      	beq.n	80028a4 <HAL_RCC_OscConfig+0x5c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002898:	d004      	beq.n	80028a4 <HAL_RCC_OscConfig+0x5c>
 800289a:	f240 1169 	movw	r1, #361	@ 0x169
 800289e:	4885      	ldr	r0, [pc, #532]	@ (8002ab4 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	f7fe f906 	bl	8000ab0 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a4:	4b84      	ldr	r3, [pc, #528]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d00c      	beq.n	80028ca <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b0:	4b81      	ldr	r3, [pc, #516]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d112      	bne.n	80028e2 <HAL_RCC_OscConfig+0x9a>
 80028bc:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028c8:	d10b      	bne.n	80028e2 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ca:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d06c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x168>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d168      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e303      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0xb2>
 80028ec:	4b72      	ldr	r3, [pc, #456]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a71      	ldr	r2, [pc, #452]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	e02e      	b.n	8002958 <HAL_RCC_OscConfig+0x110>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0xd4>
 8002902:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6c      	ldr	r2, [pc, #432]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a69      	ldr	r2, [pc, #420]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002914:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0x110>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0xf8>
 8002926:	4b64      	ldr	r3, [pc, #400]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a63      	ldr	r2, [pc, #396]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b61      	ldr	r3, [pc, #388]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a60      	ldr	r2, [pc, #384]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0x110>
 8002940:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a5c      	ldr	r2, [pc, #368]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a59      	ldr	r2, [pc, #356]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fbda 	bl	8001118 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe fbd6 	bl	8001118 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	@ 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e2b7      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x120>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fbc6 	bl	8001118 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe fbc2 	bl	8001118 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	@ 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e2a3      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	4b45      	ldr	r3, [pc, #276]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x148>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8084 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCC_OscConfig+0x192>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d004      	beq.n	80029da <HAL_RCC_OscConfig+0x192>
 80029d0:	f240 119b 	movw	r1, #411	@ 0x19b
 80029d4:	4837      	ldr	r0, [pc, #220]	@ (8002ab4 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	f7fe f86b 	bl	8000ab0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b1f      	cmp	r3, #31
 80029e0:	d904      	bls.n	80029ec <HAL_RCC_OscConfig+0x1a4>
 80029e2:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 80029e6:	4833      	ldr	r0, [pc, #204]	@ (8002ab4 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	f7fe f862 	bl	8000ab0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ec:	4b32      	ldr	r3, [pc, #200]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d11c      	bne.n	8002a3e <HAL_RCC_OscConfig+0x1f6>
 8002a04:	4b2c      	ldr	r3, [pc, #176]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d116      	bne.n	8002a3e <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a10:	4b29      	ldr	r3, [pc, #164]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_OscConfig+0x1e0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e260      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b23      	ldr	r3, [pc, #140]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4920      	ldr	r1, [pc, #128]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3c:	e044      	b.n	8002ac8 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d023      	beq.n	8002a8e <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a46:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe fb61 	bl	8001118 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7fe fb5d 	bl	8001118 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e23e      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	490c      	ldr	r1, [pc, #48]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	e01c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <HAL_RCC_OscConfig+0x270>)
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fb3d 	bl	8001118 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa0:	e00c      	b.n	8002abc <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fb39 	bl	8001118 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d905      	bls.n	8002abc <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e21a      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
 8002ab4:	08006df8 	.word	0x08006df8
 8002ab8:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abc:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ec      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d043      	beq.n	8002b5c <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_OscConfig+0x2a6>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d004      	beq.n	8002aee <HAL_RCC_OscConfig+0x2a6>
 8002ae4:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8002ae8:	4874      	ldr	r0, [pc, #464]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002aea:	f7fd ffe1 	bl	8000ab0 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d019      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af6:	4b70      	ldr	r3, [pc, #448]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002afa:	4a6f      	ldr	r2, [pc, #444]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7fe fb09 	bl	8001118 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fb05 	bl	8001118 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1e6      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1c:	4b66      	ldr	r3, [pc, #408]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x2c2>
 8002b28:	e018      	b.n	8002b5c <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2a:	4b63      	ldr	r3, [pc, #396]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b2e:	4a62      	ldr	r2, [pc, #392]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe faef 	bl	8001118 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7fe faeb 	bl	8001118 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e1cc      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b50:	4b59      	ldr	r3, [pc, #356]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80bc 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00c      	beq.n	8002b8c <HAL_RCC_OscConfig+0x344>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d008      	beq.n	8002b8c <HAL_RCC_OscConfig+0x344>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d004      	beq.n	8002b8c <HAL_RCC_OscConfig+0x344>
 8002b82:	f240 2106 	movw	r1, #518	@ 0x206
 8002b86:	484d      	ldr	r0, [pc, #308]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002b88:	f7fd ff92 	bl	8000ab0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10d      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	4b47      	ldr	r3, [pc, #284]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	4a46      	ldr	r2, [pc, #280]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba4:	4b44      	ldr	r3, [pc, #272]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb4:	4b42      	ldr	r3, [pc, #264]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d118      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe faa4 	bl	8001118 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd4:	f7fe faa0 	bl	8001118 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	@ 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e181      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be6:	4b36      	ldr	r3, [pc, #216]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c06:	e02d      	b.n	8002c64 <HAL_RCC_OscConfig+0x41c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10c      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3e2>
 8002c10:	4b29      	ldr	r3, [pc, #164]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c14:	4a28      	ldr	r2, [pc, #160]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1c:	4b26      	ldr	r3, [pc, #152]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c20:	4a25      	ldr	r2, [pc, #148]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f023 0304 	bic.w	r3, r3, #4
 8002c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c28:	e01c      	b.n	8002c64 <HAL_RCC_OscConfig+0x41c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x404>
 8002c32:	4b21      	ldr	r3, [pc, #132]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	4a20      	ldr	r2, [pc, #128]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0x41c>
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c50:	4a19      	ldr	r2, [pc, #100]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c58:	4b17      	ldr	r3, [pc, #92]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5c:	4a16      	ldr	r2, [pc, #88]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	f023 0304 	bic.w	r3, r3, #4
 8002c62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d015      	beq.n	8002c98 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fe fa54 	bl	8001118 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7fe fa50 	bl	8001118 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e12f      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0ee      	beq.n	8002c74 <HAL_RCC_OscConfig+0x42c>
 8002c96:	e01b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe fa3e 	bl	8001118 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9e:	e011      	b.n	8002cc4 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fa3a 	bl	8001118 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d908      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e119      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08006df8 	.word	0x08006df8
 8002cc0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e7      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d105      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd6:	4b87      	ldr	r3, [pc, #540]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	4a86      	ldr	r2, [pc, #536]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002cdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4bc>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4bc>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d004      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4bc>
 8002cfa:	f240 214a 	movw	r1, #586	@ 0x24a
 8002cfe:	487e      	ldr	r0, [pc, #504]	@ (8002ef8 <HAL_RCC_OscConfig+0x6b0>)
 8002d00:	f7fd fed6 	bl	8000ab0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80ed 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d0e:	4b79      	ldr	r3, [pc, #484]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	f000 80b4 	beq.w	8002e84 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	f040 8095 	bne.w	8002e50 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_OscConfig+0x4fa>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d36:	d004      	beq.n	8002d42 <HAL_RCC_OscConfig+0x4fa>
 8002d38:	f240 2153 	movw	r1, #595	@ 0x253
 8002d3c:	486e      	ldr	r0, [pc, #440]	@ (8002ef8 <HAL_RCC_OscConfig+0x6b0>)
 8002d3e:	f7fd feb7 	bl	8000ab0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d903      	bls.n	8002d52 <HAL_RCC_OscConfig+0x50a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d50:	d904      	bls.n	8002d5c <HAL_RCC_OscConfig+0x514>
 8002d52:	f44f 7115 	mov.w	r1, #596	@ 0x254
 8002d56:	4868      	ldr	r0, [pc, #416]	@ (8002ef8 <HAL_RCC_OscConfig+0x6b0>)
 8002d58:	f7fd feaa 	bl	8000ab0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	2b31      	cmp	r3, #49	@ 0x31
 8002d62:	d904      	bls.n	8002d6e <HAL_RCC_OscConfig+0x526>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8002d6c:	d904      	bls.n	8002d78 <HAL_RCC_OscConfig+0x530>
 8002d6e:	f240 2155 	movw	r1, #597	@ 0x255
 8002d72:	4861      	ldr	r0, [pc, #388]	@ (8002ef8 <HAL_RCC_OscConfig+0x6b0>)
 8002d74:	f7fd fe9c 	bl	8000ab0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d010      	beq.n	8002da2 <HAL_RCC_OscConfig+0x55a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d00c      	beq.n	8002da2 <HAL_RCC_OscConfig+0x55a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_OscConfig+0x55a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d004      	beq.n	8002da2 <HAL_RCC_OscConfig+0x55a>
 8002d98:	f240 2156 	movw	r1, #598	@ 0x256
 8002d9c:	4856      	ldr	r0, [pc, #344]	@ (8002ef8 <HAL_RCC_OscConfig+0x6b0>)
 8002d9e:	f7fd fe87 	bl	8000ab0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d903      	bls.n	8002db2 <HAL_RCC_OscConfig+0x56a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	d904      	bls.n	8002dbc <HAL_RCC_OscConfig+0x574>
 8002db2:	f240 2157 	movw	r1, #599	@ 0x257
 8002db6:	4850      	ldr	r0, [pc, #320]	@ (8002ef8 <HAL_RCC_OscConfig+0x6b0>)
 8002db8:	f7fd fe7a 	bl	8000ab0 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a4c      	ldr	r2, [pc, #304]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe f9a6 	bl	8001118 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fe f9a2 	bl	8001118 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e083      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de2:	4b44      	ldr	r3, [pc, #272]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	019b      	lsls	r3, r3, #6
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	3b01      	subs	r3, #1
 8002e08:	041b      	lsls	r3, r3, #16
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e10:	061b      	lsls	r3, r3, #24
 8002e12:	4313      	orrs	r3, r2
 8002e14:	4a37      	ldr	r2, [pc, #220]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002e16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b35      	ldr	r3, [pc, #212]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a34      	ldr	r2, [pc, #208]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe f976 	bl	8001118 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe f972 	bl	8001118 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e053      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x5e8>
 8002e4e:	e04b      	b.n	8002ee8 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e50:	4b28      	ldr	r3, [pc, #160]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a27      	ldr	r2, [pc, #156]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe f95c 	bl	8001118 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe f958 	bl	8001118 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e039      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e76:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x61c>
 8002e82:	e031      	b.n	8002ee8 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <HAL_RCC_OscConfig+0x6ac>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d028      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d121      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d11a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	08006df8 	.word	0x08006df8

08002efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e18c      	b.n	800322e <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x28>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b0f      	cmp	r3, #15
 8002f22:	d904      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x32>
 8002f24:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8002f28:	4887      	ldr	r0, [pc, #540]	@ (8003148 <HAL_RCC_ClockConfig+0x24c>)
 8002f2a:	f7fd fdc1 	bl	8000ab0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d031      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d02e      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d02b      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d028      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d025      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d022      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	d01f      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b07      	cmp	r3, #7
 8002f5c:	d01c      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d019      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b09      	cmp	r3, #9
 8002f68:	d016      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b0a      	cmp	r3, #10
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b0b      	cmp	r3, #11
 8002f74:	d010      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	d00d      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b0d      	cmp	r3, #13
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b0e      	cmp	r3, #14
 8002f86:	d007      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d004      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x9c>
 8002f8e:	f240 21de 	movw	r1, #734	@ 0x2de
 8002f92:	486d      	ldr	r0, [pc, #436]	@ (8003148 <HAL_RCC_ClockConfig+0x24c>)
 8002f94:	f7fd fd8c 	bl	8000ab0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f98:	4b6c      	ldr	r3, [pc, #432]	@ (800314c <HAL_RCC_ClockConfig+0x250>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d910      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b69      	ldr	r3, [pc, #420]	@ (800314c <HAL_RCC_ClockConfig+0x250>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 020f 	bic.w	r2, r3, #15
 8002fae:	4967      	ldr	r1, [pc, #412]	@ (800314c <HAL_RCC_ClockConfig+0x250>)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b65      	ldr	r3, [pc, #404]	@ (800314c <HAL_RCC_ClockConfig+0x250>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e132      	b.n	800322e <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d049      	beq.n	8003068 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe0:	4b5b      	ldr	r3, [pc, #364]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 8002fe6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff8:	4b55      	ldr	r3, [pc, #340]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a54      	ldr	r2, [pc, #336]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 8002ffe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003002:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d024      	beq.n	8003056 <HAL_RCC_ClockConfig+0x15a>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b80      	cmp	r3, #128	@ 0x80
 8003012:	d020      	beq.n	8003056 <HAL_RCC_ClockConfig+0x15a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b90      	cmp	r3, #144	@ 0x90
 800301a:	d01c      	beq.n	8003056 <HAL_RCC_ClockConfig+0x15a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2ba0      	cmp	r3, #160	@ 0xa0
 8003022:	d018      	beq.n	8003056 <HAL_RCC_ClockConfig+0x15a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2bb0      	cmp	r3, #176	@ 0xb0
 800302a:	d014      	beq.n	8003056 <HAL_RCC_ClockConfig+0x15a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2bc0      	cmp	r3, #192	@ 0xc0
 8003032:	d010      	beq.n	8003056 <HAL_RCC_ClockConfig+0x15a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2bd0      	cmp	r3, #208	@ 0xd0
 800303a:	d00c      	beq.n	8003056 <HAL_RCC_ClockConfig+0x15a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2be0      	cmp	r3, #224	@ 0xe0
 8003042:	d008      	beq.n	8003056 <HAL_RCC_ClockConfig+0x15a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2bf0      	cmp	r3, #240	@ 0xf0
 800304a:	d004      	beq.n	8003056 <HAL_RCC_ClockConfig+0x15a>
 800304c:	f240 3102 	movw	r1, #770	@ 0x302
 8003050:	483d      	ldr	r0, [pc, #244]	@ (8003148 <HAL_RCC_ClockConfig+0x24c>)
 8003052:	f7fd fd2d 	bl	8000ab0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003056:	4b3e      	ldr	r3, [pc, #248]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	493b      	ldr	r1, [pc, #236]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 8003064:	4313      	orrs	r3, r2
 8003066:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d051      	beq.n	8003118 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00c      	beq.n	8003096 <HAL_RCC_ClockConfig+0x19a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x19a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d004      	beq.n	8003096 <HAL_RCC_ClockConfig+0x19a>
 800308c:	f240 3109 	movw	r1, #777	@ 0x309
 8003090:	482d      	ldr	r0, [pc, #180]	@ (8003148 <HAL_RCC_ClockConfig+0x24c>)
 8003092:	f7fd fd0d 	bl	8000ab0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b2c      	ldr	r3, [pc, #176]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0bf      	b.n	800322e <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	4b26      	ldr	r3, [pc, #152]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e0b3      	b.n	800322e <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c6:	4b22      	ldr	r3, [pc, #136]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0ab      	b.n	800322e <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	491b      	ldr	r1, [pc, #108]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e8:	f7fe f816 	bl	8001118 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fe f812 	bl	8001118 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e093      	b.n	800322e <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <HAL_RCC_ClockConfig+0x254>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003118:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <HAL_RCC_ClockConfig+0x250>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d216      	bcs.n	8003154 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <HAL_RCC_ClockConfig+0x250>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	4907      	ldr	r1, [pc, #28]	@ (800314c <HAL_RCC_ClockConfig+0x250>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b05      	ldr	r3, [pc, #20]	@ (800314c <HAL_RCC_ClockConfig+0x250>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d007      	beq.n	8003154 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e072      	b.n	800322e <HAL_RCC_ClockConfig+0x332>
 8003148:	08006df8 	.word	0x08006df8
 800314c:	40023c00 	.word	0x40023c00
 8003150:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d025      	beq.n	80031ac <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d018      	beq.n	800319a <HAL_RCC_ClockConfig+0x29e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003170:	d013      	beq.n	800319a <HAL_RCC_ClockConfig+0x29e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800317a:	d00e      	beq.n	800319a <HAL_RCC_ClockConfig+0x29e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003184:	d009      	beq.n	800319a <HAL_RCC_ClockConfig+0x29e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800318e:	d004      	beq.n	800319a <HAL_RCC_ClockConfig+0x29e>
 8003190:	f240 3146 	movw	r1, #838	@ 0x346
 8003194:	4828      	ldr	r0, [pc, #160]	@ (8003238 <HAL_RCC_ClockConfig+0x33c>)
 8003196:	f7fd fc8b 	bl	8000ab0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800319a:	4b28      	ldr	r3, [pc, #160]	@ (800323c <HAL_RCC_ClockConfig+0x340>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	4925      	ldr	r1, [pc, #148]	@ (800323c <HAL_RCC_ClockConfig+0x340>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d026      	beq.n	8003206 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d018      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x2f6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c8:	d013      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x2f6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80031d2:	d00e      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x2f6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80031dc:	d009      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x2f6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80031e6:	d004      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x2f6>
 80031e8:	f240 314d 	movw	r1, #845	@ 0x34d
 80031ec:	4812      	ldr	r0, [pc, #72]	@ (8003238 <HAL_RCC_ClockConfig+0x33c>)
 80031ee:	f7fd fc5f 	bl	8000ab0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031f2:	4b12      	ldr	r3, [pc, #72]	@ (800323c <HAL_RCC_ClockConfig+0x340>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	490e      	ldr	r1, [pc, #56]	@ (800323c <HAL_RCC_ClockConfig+0x340>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003206:	f000 f821 	bl	800324c <HAL_RCC_GetSysClockFreq>
 800320a:	4602      	mov	r2, r0
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <HAL_RCC_ClockConfig+0x340>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	490a      	ldr	r1, [pc, #40]	@ (8003240 <HAL_RCC_ClockConfig+0x344>)
 8003218:	5ccb      	ldrb	r3, [r1, r3]
 800321a:	fa22 f303 	lsr.w	r3, r2, r3
 800321e:	4a09      	ldr	r2, [pc, #36]	@ (8003244 <HAL_RCC_ClockConfig+0x348>)
 8003220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <HAL_RCC_ClockConfig+0x34c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd ff32 	bl	8001090 <HAL_InitTick>

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	08006df8 	.word	0x08006df8
 800323c:	40023800 	.word	0x40023800
 8003240:	08006f1c 	.word	0x08006f1c
 8003244:	20000000 	.word	0x20000000
 8003248:	20000004 	.word	0x20000004

0800324c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003250:	b094      	sub	sp, #80	@ 0x50
 8003252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	647b      	str	r3, [r7, #68]	@ 0x44
 8003258:	2300      	movs	r3, #0
 800325a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800325c:	2300      	movs	r3, #0
 800325e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003264:	4b79      	ldr	r3, [pc, #484]	@ (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b08      	cmp	r3, #8
 800326e:	d00d      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0x40>
 8003270:	2b08      	cmp	r3, #8
 8003272:	f200 80e1 	bhi.w	8003438 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x34>
 800327a:	2b04      	cmp	r3, #4
 800327c:	d003      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x3a>
 800327e:	e0db      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003280:	4b73      	ldr	r3, [pc, #460]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x204>)
 8003282:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003284:	e0db      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003286:	4b73      	ldr	r3, [pc, #460]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x208>)
 8003288:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800328a:	e0d8      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800328c:	4b6f      	ldr	r3, [pc, #444]	@ (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003294:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003296:	4b6d      	ldr	r3, [pc, #436]	@ (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d063      	beq.n	800336a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a2:	4b6a      	ldr	r3, [pc, #424]	@ (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	2200      	movs	r2, #0
 80032aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80032b6:	2300      	movs	r3, #0
 80032b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032be:	4622      	mov	r2, r4
 80032c0:	462b      	mov	r3, r5
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f04f 0100 	mov.w	r1, #0
 80032ca:	0159      	lsls	r1, r3, #5
 80032cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032d0:	0150      	lsls	r0, r2, #5
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4621      	mov	r1, r4
 80032d8:	1a51      	subs	r1, r2, r1
 80032da:	6139      	str	r1, [r7, #16]
 80032dc:	4629      	mov	r1, r5
 80032de:	eb63 0301 	sbc.w	r3, r3, r1
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032f0:	4659      	mov	r1, fp
 80032f2:	018b      	lsls	r3, r1, #6
 80032f4:	4651      	mov	r1, sl
 80032f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032fa:	4651      	mov	r1, sl
 80032fc:	018a      	lsls	r2, r1, #6
 80032fe:	4651      	mov	r1, sl
 8003300:	ebb2 0801 	subs.w	r8, r2, r1
 8003304:	4659      	mov	r1, fp
 8003306:	eb63 0901 	sbc.w	r9, r3, r1
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800331a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800331e:	4690      	mov	r8, r2
 8003320:	4699      	mov	r9, r3
 8003322:	4623      	mov	r3, r4
 8003324:	eb18 0303 	adds.w	r3, r8, r3
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	462b      	mov	r3, r5
 800332c:	eb49 0303 	adc.w	r3, r9, r3
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800333e:	4629      	mov	r1, r5
 8003340:	024b      	lsls	r3, r1, #9
 8003342:	4621      	mov	r1, r4
 8003344:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003348:	4621      	mov	r1, r4
 800334a:	024a      	lsls	r2, r1, #9
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003352:	2200      	movs	r2, #0
 8003354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003356:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800335c:	f7fc ff54 	bl	8000208 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4613      	mov	r3, r2
 8003366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003368:	e058      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336a:	4b38      	ldr	r3, [pc, #224]	@ (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	099b      	lsrs	r3, r3, #6
 8003370:	2200      	movs	r2, #0
 8003372:	4618      	mov	r0, r3
 8003374:	4611      	mov	r1, r2
 8003376:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	2300      	movs	r3, #0
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003384:	4642      	mov	r2, r8
 8003386:	464b      	mov	r3, r9
 8003388:	f04f 0000 	mov.w	r0, #0
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	0159      	lsls	r1, r3, #5
 8003392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003396:	0150      	lsls	r0, r2, #5
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4641      	mov	r1, r8
 800339e:	ebb2 0a01 	subs.w	sl, r2, r1
 80033a2:	4649      	mov	r1, r9
 80033a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033bc:	ebb2 040a 	subs.w	r4, r2, sl
 80033c0:	eb63 050b 	sbc.w	r5, r3, fp
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	00eb      	lsls	r3, r5, #3
 80033ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d2:	00e2      	lsls	r2, r4, #3
 80033d4:	4614      	mov	r4, r2
 80033d6:	461d      	mov	r5, r3
 80033d8:	4643      	mov	r3, r8
 80033da:	18e3      	adds	r3, r4, r3
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	464b      	mov	r3, r9
 80033e0:	eb45 0303 	adc.w	r3, r5, r3
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f2:	4629      	mov	r1, r5
 80033f4:	028b      	lsls	r3, r1, #10
 80033f6:	4621      	mov	r1, r4
 80033f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033fc:	4621      	mov	r1, r4
 80033fe:	028a      	lsls	r2, r1, #10
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003406:	2200      	movs	r2, #0
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	61fa      	str	r2, [r7, #28]
 800340c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003410:	f7fc fefa 	bl	8000208 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4613      	mov	r3, r2
 800341a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800341c:	4b0b      	ldr	r3, [pc, #44]	@ (800344c <HAL_RCC_GetSysClockFreq+0x200>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	3301      	adds	r3, #1
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800342c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800342e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003436:	e002      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003438:	4b05      	ldr	r3, [pc, #20]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x204>)
 800343a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800343c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003440:	4618      	mov	r0, r3
 8003442:	3750      	adds	r7, #80	@ 0x50
 8003444:	46bd      	mov	sp, r7
 8003446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	00f42400 	.word	0x00f42400
 8003454:	007a1200 	.word	0x007a1200

08003458 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800345c:	4b03      	ldr	r3, [pc, #12]	@ (800346c <HAL_RCC_GetHCLKFreq+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000000 	.word	0x20000000

08003470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003474:	f7ff fff0 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	0a9b      	lsrs	r3, r3, #10
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	@ (8003494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	08006f2c 	.word	0x08006f2c

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800349c:	f7ff ffdc 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0b5b      	lsrs	r3, r3, #13
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4903      	ldr	r1, [pc, #12]	@ (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40023800 	.word	0x40023800
 80034bc:	08006f2c 	.word	0x08006f2c

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 8089 	bne.w	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 8082 	bne.w	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	d17b      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d175      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003518:	2b00      	cmp	r3, #0
 800351a:	d16f      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d169      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003530:	2b00      	cmp	r3, #0
 8003532:	d163      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800353c:	2b00      	cmp	r3, #0
 800353e:	d15d      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003548:	2b00      	cmp	r3, #0
 800354a:	d157      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d151      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d14b      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d145      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d13f      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d139      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d133      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d12d      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d127      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d121      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d11b      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d115      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10f      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035f4:	2172      	movs	r1, #114	@ 0x72
 80035f6:	4895      	ldr	r0, [pc, #596]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80035f8:	f7fd fa5a 	bl	8000ab0 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01f      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003614:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003618:	d003      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800361a:	2178      	movs	r1, #120	@ 0x78
 800361c:	488b      	ldr	r0, [pc, #556]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800361e:	f7fd fa47 	bl	8000ab0 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003622:	4b8b      	ldr	r3, [pc, #556]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4a8a      	ldr	r2, [pc, #552]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003628:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800362c:	6093      	str	r3, [r2, #8]
 800362e:	4b88      	ldr	r3, [pc, #544]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003636:	4986      	ldr	r1, [pc, #536]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003638:	4313      	orrs	r3, r2
 800363a:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8003644:	2301      	movs	r3, #1
 8003646:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d029      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00d      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003664:	d008      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800366a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800366e:	d003      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003670:	2188      	movs	r1, #136	@ 0x88
 8003672:	4876      	ldr	r0, [pc, #472]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003674:	f7fd fa1c 	bl	8000ab0 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003678:	4b75      	ldr	r3, [pc, #468]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800367a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800367e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003686:	4972      	ldr	r1, [pc, #456]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003696:	d101      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8003698:	2301      	movs	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 80036a4:	2301      	movs	r3, #1
 80036a6:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d029      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036c4:	d008      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036ce:	d003      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036d0:	219c      	movs	r1, #156	@ 0x9c
 80036d2:	485e      	ldr	r0, [pc, #376]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80036d4:	f7fd f9ec 	bl	8000ab0 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036d8:	4b5d      	ldr	r3, [pc, #372]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80036da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	495a      	ldr	r1, [pc, #360]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036f6:	d101      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 80036f8:	2301      	movs	r3, #1
 80036fa:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8003704:	2301      	movs	r3, #1
 8003706:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8003714:	2301      	movs	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8186 	beq.w	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800372e:	f000 80e4 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800373a:	f000 80de 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	4a44      	ldr	r2, [pc, #272]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8003744:	4293      	cmp	r3, r2
 8003746:	f000 80d8 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	4a42      	ldr	r2, [pc, #264]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003750:	4293      	cmp	r3, r2
 8003752:	f000 80d2 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	4a40      	ldr	r2, [pc, #256]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	f000 80cc 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	4a3e      	ldr	r2, [pc, #248]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	f000 80c6 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	4a3c      	ldr	r2, [pc, #240]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	f000 80c0 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	4a3a      	ldr	r2, [pc, #232]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	f000 80ba 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	4a38      	ldr	r2, [pc, #224]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800378c:	4293      	cmp	r3, r2
 800378e:	f000 80b4 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	4a36      	ldr	r2, [pc, #216]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	f000 80ae 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	4a34      	ldr	r2, [pc, #208]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	f000 80a8 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	4a32      	ldr	r2, [pc, #200]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	f000 80a2 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	4a30      	ldr	r2, [pc, #192]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	f000 809c 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	f000 8096 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	f000 8090 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	4a2a      	ldr	r2, [pc, #168]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	f000 808a 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	4a28      	ldr	r2, [pc, #160]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	f000 8084 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	4a26      	ldr	r2, [pc, #152]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d07e      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	4a24      	ldr	r2, [pc, #144]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d079      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	4a23      	ldr	r2, [pc, #140]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d074      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	4a21      	ldr	r2, [pc, #132]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d06f      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	4a20      	ldr	r2, [pc, #128]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d06a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003828:	4a1e      	ldr	r2, [pc, #120]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d065      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	4a1d      	ldr	r2, [pc, #116]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d060      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	4a1b      	ldr	r2, [pc, #108]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d05b      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	4a1a      	ldr	r2, [pc, #104]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	e033      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800384c:	08006e30 	.word	0x08006e30
 8003850:	40023800 	.word	0x40023800
 8003854:	00020300 	.word	0x00020300
 8003858:	00030300 	.word	0x00030300
 800385c:	00040300 	.word	0x00040300
 8003860:	00050300 	.word	0x00050300
 8003864:	00060300 	.word	0x00060300
 8003868:	00070300 	.word	0x00070300
 800386c:	00080300 	.word	0x00080300
 8003870:	00090300 	.word	0x00090300
 8003874:	000a0300 	.word	0x000a0300
 8003878:	000b0300 	.word	0x000b0300
 800387c:	000c0300 	.word	0x000c0300
 8003880:	000d0300 	.word	0x000d0300
 8003884:	000e0300 	.word	0x000e0300
 8003888:	000f0300 	.word	0x000f0300
 800388c:	00100300 	.word	0x00100300
 8003890:	00110300 	.word	0x00110300
 8003894:	00120300 	.word	0x00120300
 8003898:	00130300 	.word	0x00130300
 800389c:	00140300 	.word	0x00140300
 80038a0:	00150300 	.word	0x00150300
 80038a4:	00160300 	.word	0x00160300
 80038a8:	00170300 	.word	0x00170300
 80038ac:	00180300 	.word	0x00180300
 80038b0:	00190300 	.word	0x00190300
 80038b4:	d021      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	4a4c      	ldr	r2, [pc, #304]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d01c      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	4a4a      	ldr	r2, [pc, #296]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d017      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	4a49      	ldr	r2, [pc, #292]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d012      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	4a47      	ldr	r2, [pc, #284]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00d      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	4a46      	ldr	r2, [pc, #280]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d008      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	4a44      	ldr	r2, [pc, #272]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80038f2:	21b7      	movs	r1, #183	@ 0xb7
 80038f4:	4843      	ldr	r0, [pc, #268]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80038f6:	f7fd f8db 	bl	8000ab0 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038fa:	4b43      	ldr	r3, [pc, #268]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	4a42      	ldr	r2, [pc, #264]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003904:	6413      	str	r3, [r2, #64]	@ 0x40
 8003906:	4b40      	ldr	r3, [pc, #256]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003912:	4b3e      	ldr	r3, [pc, #248]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a3d      	ldr	r2, [pc, #244]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800391c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391e:	f7fd fbfb 	bl	8001118 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003924:	e009      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003926:	f7fd fbf7 	bl	8001118 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b64      	cmp	r3, #100	@ 0x64
 8003932:	d902      	bls.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	f000 bd9f 	b.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800393a:	4b34      	ldr	r3, [pc, #208]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0ef      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003946:	4b30      	ldr	r3, [pc, #192]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d036      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	429a      	cmp	r2, r3
 8003962:	d02f      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003964:	4b28      	ldr	r3, [pc, #160]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800396c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800396e:	4b26      	ldr	r3, [pc, #152]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	4a25      	ldr	r2, [pc, #148]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003978:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800397a:	4b23      	ldr	r3, [pc, #140]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	4a22      	ldr	r2, [pc, #136]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003984:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003986:	4a20      	ldr	r2, [pc, #128]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800398c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d115      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd fbbe 	bl	8001118 <HAL_GetTick>
 800399c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399e:	e00b      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a0:	f7fd fbba 	bl	8001118 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d902      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	f000 bd60 	b.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b8:	4b13      	ldr	r3, [pc, #76]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ed      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039d0:	d120      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80039d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039de:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80039e0:	400b      	ands	r3, r1
 80039e2:	4909      	ldr	r1, [pc, #36]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
 80039e8:	e01a      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80039ea:	bf00      	nop
 80039ec:	001a0300 	.word	0x001a0300
 80039f0:	001b0300 	.word	0x001b0300
 80039f4:	001c0300 	.word	0x001c0300
 80039f8:	001d0300 	.word	0x001d0300
 80039fc:	001e0300 	.word	0x001e0300
 8003a00:	001f0300 	.word	0x001f0300
 8003a04:	08006e30 	.word	0x08006e30
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40007000 	.word	0x40007000
 8003a10:	0ffffcff 	.word	0x0ffffcff
 8003a14:	4b9a      	ldr	r3, [pc, #616]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a99      	ldr	r2, [pc, #612]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a1a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003a1e:	6093      	str	r3, [r2, #8]
 8003a20:	4b97      	ldr	r3, [pc, #604]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2c:	4994      	ldr	r1, [pc, #592]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01d      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003a50:	21f1      	movs	r1, #241	@ 0xf1
 8003a52:	488c      	ldr	r0, [pc, #560]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003a54:	f7fd f82c 	bl	8000ab0 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a58:	4b89      	ldr	r3, [pc, #548]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a5e:	4a88      	ldr	r2, [pc, #544]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a68:	4b85      	ldr	r3, [pc, #532]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a6a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a72:	4983      	ldr	r1, [pc, #524]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01c      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a96:	d008      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8003aa2:	21fb      	movs	r1, #251	@ 0xfb
 8003aa4:	4877      	ldr	r0, [pc, #476]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003aa6:	f7fd f803 	bl	8000ab0 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aaa:	4b75      	ldr	r3, [pc, #468]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab8:	4971      	ldr	r1, [pc, #452]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01d      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003adc:	d009      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ae2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ae6:	d004      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8003ae8:	f240 1105 	movw	r1, #261	@ 0x105
 8003aec:	4865      	ldr	r0, [pc, #404]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003aee:	f7fc ffdf 	bl	8000ab0 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003af2:	4b63      	ldr	r3, [pc, #396]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b00:	495f      	ldr	r1, [pc, #380]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01d      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b24:	d009      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b2e:	d004      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8003b30:	f240 110f 	movw	r1, #271	@ 0x10f
 8003b34:	4853      	ldr	r0, [pc, #332]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003b36:	f7fc ffbb 	bl	8000ab0 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b3a:	4b51      	ldr	r3, [pc, #324]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b48:	494d      	ldr	r1, [pc, #308]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01d      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00e      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b76:	d004      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003b78:	f240 1119 	movw	r1, #281	@ 0x119
 8003b7c:	4841      	ldr	r0, [pc, #260]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003b7e:	f7fc ff97 	bl	8000ab0 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b82:	4b3f      	ldr	r3, [pc, #252]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b88:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b90:	493b      	ldr	r1, [pc, #236]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01f      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d010      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d00c      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d008      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d004      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003bc4:	f240 1123 	movw	r1, #291	@ 0x123
 8003bc8:	482e      	ldr	r0, [pc, #184]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003bca:	f7fc ff71 	bl	8000ab0 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bce:	4b2c      	ldr	r3, [pc, #176]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd4:	f023 0203 	bic.w	r2, r3, #3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bdc:	4928      	ldr	r1, [pc, #160]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01f      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d00c      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	d008      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d004      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003c10:	f240 112d 	movw	r1, #301	@ 0x12d
 8003c14:	481b      	ldr	r0, [pc, #108]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003c16:	f7fc ff4b 	bl	8000ab0 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c1a:	4b19      	ldr	r3, [pc, #100]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f023 020c 	bic.w	r2, r3, #12
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c28:	4915      	ldr	r1, [pc, #84]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d025      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d010      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d00c      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c50:	2b30      	cmp	r3, #48	@ 0x30
 8003c52:	d008      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d004      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003c5c:	f240 1137 	movw	r1, #311	@ 0x137
 8003c60:	4808      	ldr	r0, [pc, #32]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003c62:	f7fc ff25 	bl	8000ab0 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c66:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c74:	4902      	ldr	r1, [pc, #8]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c7c:	e004      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	08006e30 	.word	0x08006e30
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01f      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d010      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca0:	2b40      	cmp	r3, #64	@ 0x40
 8003ca2:	d00c      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca8:	2bc0      	cmp	r3, #192	@ 0xc0
 8003caa:	d008      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb0:	2b80      	cmp	r3, #128	@ 0x80
 8003cb2:	d004      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8003cb4:	f240 1141 	movw	r1, #321	@ 0x141
 8003cb8:	48a0      	ldr	r0, [pc, #640]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003cba:	f7fc fef9 	bl	8000ab0 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cbe:	4ba0      	ldr	r3, [pc, #640]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ccc:	499c      	ldr	r1, [pc, #624]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d022      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf0:	d00e      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cfa:	d009      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d04:	d004      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003d06:	f240 114b 	movw	r1, #331	@ 0x14b
 8003d0a:	488c      	ldr	r0, [pc, #560]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003d0c:	f7fc fed0 	bl	8000ab0 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d10:	4b8b      	ldr	r3, [pc, #556]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1e:	4988      	ldr	r1, [pc, #544]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d022      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d013      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d42:	d00e      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d4c:	d009      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d56:	d004      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003d58:	f240 1155 	movw	r1, #341	@ 0x155
 8003d5c:	4877      	ldr	r0, [pc, #476]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003d5e:	f7fc fea7 	bl	8000ab0 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d62:	4b77      	ldr	r3, [pc, #476]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d70:	4973      	ldr	r1, [pc, #460]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d022      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d013      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d94:	d00e      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d9e:	d009      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da8:	d004      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8003daa:	f240 115f 	movw	r1, #351	@ 0x15f
 8003dae:	4863      	ldr	r0, [pc, #396]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003db0:	f7fc fe7e 	bl	8000ab0 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003db4:	4b62      	ldr	r3, [pc, #392]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc2:	495f      	ldr	r1, [pc, #380]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d022      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d013      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003de6:	d00e      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003df0:	d009      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dfa:	d004      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8003dfc:	f240 1169 	movw	r1, #361	@ 0x169
 8003e00:	484e      	ldr	r0, [pc, #312]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003e02:	f7fc fe55 	bl	8000ab0 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e06:	4b4e      	ldr	r3, [pc, #312]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e14:	494a      	ldr	r1, [pc, #296]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d018      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e30:	d008      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003e3a:	f240 1173 	movw	r1, #371	@ 0x173
 8003e3e:	483f      	ldr	r0, [pc, #252]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003e40:	f7fc fe36 	bl	8000ab0 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e44:	4b3e      	ldr	r3, [pc, #248]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e52:	493b      	ldr	r1, [pc, #236]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01f      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d004      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003e78:	f240 117d 	movw	r1, #381	@ 0x17d
 8003e7c:	482f      	ldr	r0, [pc, #188]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003e7e:	f7fc fe17 	bl	8000ab0 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e82:	4b2f      	ldr	r3, [pc, #188]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e88:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e90:	492b      	ldr	r1, [pc, #172]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d022      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d013      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ece:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003edc:	d009      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ee6:	d004      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003ee8:	f240 1195 	movw	r1, #405	@ 0x195
 8003eec:	4813      	ldr	r0, [pc, #76]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003eee:	f7fc fddf 	bl	8000ab0 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef2:	4b13      	ldr	r3, [pc, #76]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f00:	490f      	ldr	r1, [pc, #60]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d020      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f1e:	d009      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f2a:	f240 119f 	movw	r1, #415	@ 0x19f
 8003f2e:	4803      	ldr	r0, [pc, #12]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003f30:	f7fc fdbe 	bl	8000ab0 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f34:	4b02      	ldr	r3, [pc, #8]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3a:	e003      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8003f3c:	08006e30 	.word	0x08006e30
 8003f40:	40023800 	.word	0x40023800
 8003f44:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f4e:	4910      	ldr	r1, [pc, #64]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d006      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8155 	beq.w	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f6a:	4b09      	ldr	r3, [pc, #36]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a08      	ldr	r2, [pc, #32]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8003f70:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f76:	f7fd f8cf 	bl	8001118 <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f7e:	f7fd f8cb 	bl	8001118 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b64      	cmp	r3, #100	@ 0x64
 8003f8a:	d903      	bls.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e273      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8003f90:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f94:	4b9a      	ldr	r3, [pc, #616]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ee      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b31      	cmp	r3, #49	@ 0x31
 8003fa6:	d904      	bls.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8003fb0:	d904      	bls.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8003fb2:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8003fb6:	4893      	ldr	r0, [pc, #588]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8003fb8:	f7fc fd7a 	bl	8000ab0 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d02e      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d12a      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d903      	bls.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b07      	cmp	r3, #7
 8003fde:	d904      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003fe0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003fe4:	4887      	ldr	r0, [pc, #540]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8003fe6:	f7fc fd63 	bl	8000ab0 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fea:	4b85      	ldr	r3, [pc, #532]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ff8:	4b81      	ldr	r3, [pc, #516]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ffe:	0e1b      	lsrs	r3, r3, #24
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	019a      	lsls	r2, r3, #6
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	041b      	lsls	r3, r3, #16
 8004010:	431a      	orrs	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	071b      	lsls	r3, r3, #28
 800401e:	4978      	ldr	r1, [pc, #480]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d004      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004044:	2b00      	cmp	r3, #0
 8004046:	d048      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004050:	d143      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d903      	bls.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b0f      	cmp	r3, #15
 8004060:	d904      	bls.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004062:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8004066:	4867      	ldr	r0, [pc, #412]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004068:	f7fc fd22 	bl	8000ab0 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	2b20      	cmp	r3, #32
 800407a:	d904      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 800407c:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8004080:	4860      	ldr	r0, [pc, #384]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004082:	f7fc fd15 	bl	8000ab0 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004086:	4b5e      	ldr	r3, [pc, #376]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004094:	4b5a      	ldr	r3, [pc, #360]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800409a:	0f1b      	lsrs	r3, r3, #28
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	019a      	lsls	r2, r3, #6
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	061b      	lsls	r3, r3, #24
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	071b      	lsls	r3, r3, #28
 80040ba:	4951      	ldr	r1, [pc, #324]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80040c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040c8:	f023 021f 	bic.w	r2, r3, #31
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	3b01      	subs	r3, #1
 80040d2:	494b      	ldr	r1, [pc, #300]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d032      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d010      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d00c      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d008      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d004      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004106:	f240 2105 	movw	r1, #517	@ 0x205
 800410a:	483e      	ldr	r0, [pc, #248]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800410c:	f7fc fcd0 	bl	8000ab0 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004110:	4b3b      	ldr	r3, [pc, #236]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004116:	0e1b      	lsrs	r3, r3, #24
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800411e:	4b38      	ldr	r3, [pc, #224]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004124:	0f1b      	lsrs	r3, r3, #28
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	019a      	lsls	r2, r3, #6
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	041b      	lsls	r3, r3, #16
 8004138:	431a      	orrs	r2, r3
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	431a      	orrs	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	071b      	lsls	r3, r3, #28
 8004144:	492e      	ldr	r1, [pc, #184]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d040      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d010      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d00c      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d008      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d004      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004178:	f44f 7105 	mov.w	r1, #532	@ 0x214
 800417c:	4821      	ldr	r0, [pc, #132]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800417e:	f7fc fc97 	bl	8000ab0 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d903      	bls.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b07      	cmp	r3, #7
 8004190:	d904      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004192:	f240 2115 	movw	r1, #533	@ 0x215
 8004196:	481b      	ldr	r0, [pc, #108]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004198:	f7fc fc8a 	bl	8000ab0 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d903      	bls.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b0f      	cmp	r3, #15
 80041aa:	d904      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 80041ac:	f240 2116 	movw	r1, #534	@ 0x216
 80041b0:	4814      	ldr	r0, [pc, #80]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80041b2:	f7fc fc7d 	bl	8000ab0 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	019a      	lsls	r2, r3, #6
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	071b      	lsls	r3, r3, #28
 80041d2:	490b      	ldr	r1, [pc, #44]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041da:	4b09      	ldr	r3, [pc, #36]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a08      	ldr	r2, [pc, #32]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80041e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e6:	f7fc ff97 	bl	8001118 <HAL_GetTick>
 80041ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041ec:	e00c      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041ee:	f7fc ff93 	bl	8001118 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b64      	cmp	r3, #100	@ 0x64
 80041fa:	d905      	bls.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e13b      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8004200:	40023800 	.word	0x40023800
 8004204:	08006e30 	.word	0x08006e30
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004208:	4b9d      	ldr	r3, [pc, #628]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ec      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b01      	cmp	r3, #1
 8004218:	f040 812d 	bne.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800421c:	4b98      	ldr	r3, [pc, #608]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a97      	ldr	r2, [pc, #604]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004228:	f7fc ff76 	bl	8001118 <HAL_GetTick>
 800422c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004230:	f7fc ff72 	bl	8001118 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	@ 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e11a      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004242:	4b8f      	ldr	r3, [pc, #572]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800424a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800424e:	d0ef      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	2b31      	cmp	r3, #49	@ 0x31
 8004256:	d904      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8004260:	d904      	bls.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8004262:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8004266:	4887      	ldr	r0, [pc, #540]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004268:	f7fc fc22 	bl	8000ab0 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004288:	2b00      	cmp	r3, #0
 800428a:	d048      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d144      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d903      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b0f      	cmp	r3, #15
 80042a2:	d904      	bls.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xdee>
 80042a4:	f240 214b 	movw	r1, #587	@ 0x24b
 80042a8:	4876      	ldr	r0, [pc, #472]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80042aa:	f7fc fc01 	bl	8000ab0 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d904      	bls.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80042be:	f240 214d 	movw	r1, #589	@ 0x24d
 80042c2:	4870      	ldr	r0, [pc, #448]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80042c4:	f7fc fbf4 	bl	8000ab0 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042c8:	4b6d      	ldr	r3, [pc, #436]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	0c1b      	lsrs	r3, r3, #16
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042dc:	0f1b      	lsrs	r3, r3, #28
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	019a      	lsls	r2, r3, #6
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	041b      	lsls	r3, r3, #16
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	431a      	orrs	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	071b      	lsls	r3, r3, #28
 80042fc:	4960      	ldr	r1, [pc, #384]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004304:	4b5e      	ldr	r3, [pc, #376]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004306:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800430a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	495a      	ldr	r1, [pc, #360]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d037      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xeda>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800432e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004332:	d132      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d010      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d00c      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d008      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d004      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004354:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8004358:	484a      	ldr	r0, [pc, #296]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800435a:	f7fc fba9 	bl	8000ab0 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800435e:	4b48      	ldr	r3, [pc, #288]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004364:	0e1b      	lsrs	r3, r3, #24
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800436c:	4b44      	ldr	r3, [pc, #272]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	0f1b      	lsrs	r3, r3, #28
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	019a      	lsls	r2, r3, #6
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	431a      	orrs	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	431a      	orrs	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	071b      	lsls	r3, r3, #28
 8004392:	493b      	ldr	r1, [pc, #236]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d04d      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d903      	bls.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	2b07      	cmp	r3, #7
 80043b4:	d904      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80043b6:	f240 216f 	movw	r1, #623	@ 0x26f
 80043ba:	4832      	ldr	r0, [pc, #200]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80043bc:	f7fc fb78 	bl	8000ab0 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d013      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d0:	d00e      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043da:	d009      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043e4:	d004      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80043e6:	f44f 711c 	mov.w	r1, #624	@ 0x270
 80043ea:	4826      	ldr	r0, [pc, #152]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80043ec:	f7fc fb60 	bl	8000ab0 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043f0:	4b23      	ldr	r3, [pc, #140]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f6:	0e1b      	lsrs	r3, r3, #24
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043fe:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	019a      	lsls	r2, r3, #6
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	431a      	orrs	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	071b      	lsls	r3, r3, #28
 8004424:	4916      	ldr	r1, [pc, #88]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800442c:	4b14      	ldr	r3, [pc, #80]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800442e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004432:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	4911      	ldr	r1, [pc, #68]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004442:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a0e      	ldr	r2, [pc, #56]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444e:	f7fc fe63 	bl	8001118 <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004456:	f7fc fe5f 	bl	8001118 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b64      	cmp	r3, #100	@ 0x64
 8004462:	d901      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e007      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004468:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004474:	d1ef      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	08006e30 	.word	0x08006e30

08004488 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e0f5      	b.n	8004686 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a7c      	ldr	r2, [pc, #496]	@ (8004690 <HAL_TIM_PWM_Init+0x208>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d045      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ac:	d040      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a78      	ldr	r2, [pc, #480]	@ (8004694 <HAL_TIM_PWM_Init+0x20c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d03b      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a76      	ldr	r2, [pc, #472]	@ (8004698 <HAL_TIM_PWM_Init+0x210>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d036      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a75      	ldr	r2, [pc, #468]	@ (800469c <HAL_TIM_PWM_Init+0x214>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d031      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a73      	ldr	r2, [pc, #460]	@ (80046a0 <HAL_TIM_PWM_Init+0x218>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02c      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a72      	ldr	r2, [pc, #456]	@ (80046a4 <HAL_TIM_PWM_Init+0x21c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d027      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a70      	ldr	r2, [pc, #448]	@ (80046a8 <HAL_TIM_PWM_Init+0x220>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d022      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6f      	ldr	r2, [pc, #444]	@ (80046ac <HAL_TIM_PWM_Init+0x224>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d01d      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a6d      	ldr	r2, [pc, #436]	@ (80046b0 <HAL_TIM_PWM_Init+0x228>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d018      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a6c      	ldr	r2, [pc, #432]	@ (80046b4 <HAL_TIM_PWM_Init+0x22c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d013      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a6a      	ldr	r2, [pc, #424]	@ (80046b8 <HAL_TIM_PWM_Init+0x230>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00e      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a69      	ldr	r2, [pc, #420]	@ (80046bc <HAL_TIM_PWM_Init+0x234>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d009      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a67      	ldr	r2, [pc, #412]	@ (80046c0 <HAL_TIM_PWM_Init+0x238>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d004      	beq.n	8004530 <HAL_TIM_PWM_Init+0xa8>
 8004526:	f240 5133 	movw	r1, #1331	@ 0x533
 800452a:	4866      	ldr	r0, [pc, #408]	@ (80046c4 <HAL_TIM_PWM_Init+0x23c>)
 800452c:	f7fc fac0 	bl	8000ab0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d014      	beq.n	8004562 <HAL_TIM_PWM_Init+0xda>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b10      	cmp	r3, #16
 800453e:	d010      	beq.n	8004562 <HAL_TIM_PWM_Init+0xda>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b20      	cmp	r3, #32
 8004546:	d00c      	beq.n	8004562 <HAL_TIM_PWM_Init+0xda>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b40      	cmp	r3, #64	@ 0x40
 800454e:	d008      	beq.n	8004562 <HAL_TIM_PWM_Init+0xda>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b60      	cmp	r3, #96	@ 0x60
 8004556:	d004      	beq.n	8004562 <HAL_TIM_PWM_Init+0xda>
 8004558:	f240 5134 	movw	r1, #1332	@ 0x534
 800455c:	4859      	ldr	r0, [pc, #356]	@ (80046c4 <HAL_TIM_PWM_Init+0x23c>)
 800455e:	f7fc faa7 	bl	8000ab0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00e      	beq.n	8004588 <HAL_TIM_PWM_Init+0x100>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004572:	d009      	beq.n	8004588 <HAL_TIM_PWM_Init+0x100>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800457c:	d004      	beq.n	8004588 <HAL_TIM_PWM_Init+0x100>
 800457e:	f240 5135 	movw	r1, #1333	@ 0x535
 8004582:	4850      	ldr	r0, [pc, #320]	@ (80046c4 <HAL_TIM_PWM_Init+0x23c>)
 8004584:	f7fc fa94 	bl	8000ab0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004590:	d004      	beq.n	800459c <HAL_TIM_PWM_Init+0x114>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a41      	ldr	r2, [pc, #260]	@ (800469c <HAL_TIM_PWM_Init+0x214>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d107      	bne.n	80045ac <HAL_TIM_PWM_Init+0x124>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e00e      	b.n	80045ca <HAL_TIM_PWM_Init+0x142>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <HAL_TIM_PWM_Init+0x13a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045bc:	d201      	bcs.n	80045c2 <HAL_TIM_PWM_Init+0x13a>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <HAL_TIM_PWM_Init+0x13c>
 80045c2:	2300      	movs	r3, #0
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d104      	bne.n	80045d8 <HAL_TIM_PWM_Init+0x150>
 80045ce:	f240 5136 	movw	r1, #1334	@ 0x536
 80045d2:	483c      	ldr	r0, [pc, #240]	@ (80046c4 <HAL_TIM_PWM_Init+0x23c>)
 80045d4:	f7fc fa6c 	bl	8000ab0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_TIM_PWM_Init+0x16a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b80      	cmp	r3, #128	@ 0x80
 80045e6:	d004      	beq.n	80045f2 <HAL_TIM_PWM_Init+0x16a>
 80045e8:	f240 5137 	movw	r1, #1335	@ 0x537
 80045ec:	4835      	ldr	r0, [pc, #212]	@ (80046c4 <HAL_TIM_PWM_Init+0x23c>)
 80045ee:	f7fc fa5f 	bl	8000ab0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc fb40 	bl	8000c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f000 fc84 	bl	8004f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40010000 	.word	0x40010000
 8004694:	40000400 	.word	0x40000400
 8004698:	40000800 	.word	0x40000800
 800469c:	40000c00 	.word	0x40000c00
 80046a0:	40001000 	.word	0x40001000
 80046a4:	40001400 	.word	0x40001400
 80046a8:	40010400 	.word	0x40010400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40014400 	.word	0x40014400
 80046b4:	40014800 	.word	0x40014800
 80046b8:	40001800 	.word	0x40001800
 80046bc:	40001c00 	.word	0x40001c00
 80046c0:	40002000 	.word	0x40002000
 80046c4:	08006e6c 	.word	0x08006e6c

080046c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a89      	ldr	r2, [pc, #548]	@ (80048fc <HAL_TIM_PWM_Start+0x234>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d117      	bne.n	800470c <HAL_TIM_PWM_Start+0x44>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 80ae 	beq.w	8004840 <HAL_TIM_PWM_Start+0x178>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	f000 80aa 	beq.w	8004840 <HAL_TIM_PWM_Start+0x178>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	f000 80a6 	beq.w	8004840 <HAL_TIM_PWM_Start+0x178>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	f000 80a2 	beq.w	8004840 <HAL_TIM_PWM_Start+0x178>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b10      	cmp	r3, #16
 8004700:	f000 809e 	beq.w	8004840 <HAL_TIM_PWM_Start+0x178>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b14      	cmp	r3, #20
 8004708:	f000 809a 	beq.w	8004840 <HAL_TIM_PWM_Start+0x178>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004714:	d10f      	bne.n	8004736 <HAL_TIM_PWM_Start+0x6e>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 8091 	beq.w	8004840 <HAL_TIM_PWM_Start+0x178>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b04      	cmp	r3, #4
 8004722:	f000 808d 	beq.w	8004840 <HAL_TIM_PWM_Start+0x178>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b08      	cmp	r3, #8
 800472a:	f000 8089 	beq.w	8004840 <HAL_TIM_PWM_Start+0x178>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b0c      	cmp	r3, #12
 8004732:	f000 8085 	beq.w	8004840 <HAL_TIM_PWM_Start+0x178>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a71      	ldr	r2, [pc, #452]	@ (8004900 <HAL_TIM_PWM_Start+0x238>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10b      	bne.n	8004758 <HAL_TIM_PWM_Start+0x90>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d07c      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d079      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b08      	cmp	r3, #8
 8004750:	d076      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b0c      	cmp	r3, #12
 8004756:	d073      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a69      	ldr	r2, [pc, #420]	@ (8004904 <HAL_TIM_PWM_Start+0x23c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d10b      	bne.n	800477a <HAL_TIM_PWM_Start+0xb2>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d06b      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d068      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d065      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b0c      	cmp	r3, #12
 8004778:	d062      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a62      	ldr	r2, [pc, #392]	@ (8004908 <HAL_TIM_PWM_Start+0x240>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d10b      	bne.n	800479c <HAL_TIM_PWM_Start+0xd4>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d05a      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b04      	cmp	r3, #4
 800478e:	d057      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b08      	cmp	r3, #8
 8004794:	d054      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b0c      	cmp	r3, #12
 800479a:	d051      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a5a      	ldr	r2, [pc, #360]	@ (800490c <HAL_TIM_PWM_Start+0x244>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d111      	bne.n	80047ca <HAL_TIM_PWM_Start+0x102>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d049      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d046      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d043      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	d040      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d03d      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b14      	cmp	r3, #20
 80047c8:	d03a      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a50      	ldr	r2, [pc, #320]	@ (8004910 <HAL_TIM_PWM_Start+0x248>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d105      	bne.n	80047e0 <HAL_TIM_PWM_Start+0x118>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d032      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d02f      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004914 <HAL_TIM_PWM_Start+0x24c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d102      	bne.n	80047f0 <HAL_TIM_PWM_Start+0x128>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d027      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a48      	ldr	r2, [pc, #288]	@ (8004918 <HAL_TIM_PWM_Start+0x250>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d102      	bne.n	8004800 <HAL_TIM_PWM_Start+0x138>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01f      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a45      	ldr	r2, [pc, #276]	@ (800491c <HAL_TIM_PWM_Start+0x254>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d105      	bne.n	8004816 <HAL_TIM_PWM_Start+0x14e>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d017      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b04      	cmp	r3, #4
 8004814:	d014      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a41      	ldr	r2, [pc, #260]	@ (8004920 <HAL_TIM_PWM_Start+0x258>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d102      	bne.n	8004826 <HAL_TIM_PWM_Start+0x15e>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00c      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3e      	ldr	r2, [pc, #248]	@ (8004924 <HAL_TIM_PWM_Start+0x25c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d102      	bne.n	8004836 <HAL_TIM_PWM_Start+0x16e>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d004      	beq.n	8004840 <HAL_TIM_PWM_Start+0x178>
 8004836:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800483a:	483b      	ldr	r0, [pc, #236]	@ (8004928 <HAL_TIM_PWM_Start+0x260>)
 800483c:	f7fc f938 	bl	8000ab0 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_TIM_PWM_Start+0x192>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b01      	cmp	r3, #1
 8004850:	bf14      	ite	ne
 8004852:	2301      	movne	r3, #1
 8004854:	2300      	moveq	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	e03c      	b.n	80048d4 <HAL_TIM_PWM_Start+0x20c>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b04      	cmp	r3, #4
 800485e:	d109      	bne.n	8004874 <HAL_TIM_PWM_Start+0x1ac>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	e02f      	b.n	80048d4 <HAL_TIM_PWM_Start+0x20c>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b08      	cmp	r3, #8
 8004878:	d109      	bne.n	800488e <HAL_TIM_PWM_Start+0x1c6>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	bf14      	ite	ne
 8004886:	2301      	movne	r3, #1
 8004888:	2300      	moveq	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	e022      	b.n	80048d4 <HAL_TIM_PWM_Start+0x20c>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b0c      	cmp	r3, #12
 8004892:	d109      	bne.n	80048a8 <HAL_TIM_PWM_Start+0x1e0>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e015      	b.n	80048d4 <HAL_TIM_PWM_Start+0x20c>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d109      	bne.n	80048c2 <HAL_TIM_PWM_Start+0x1fa>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	bf14      	ite	ne
 80048ba:	2301      	movne	r3, #1
 80048bc:	2300      	moveq	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e008      	b.n	80048d4 <HAL_TIM_PWM_Start+0x20c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0aa      	b.n	8004a32 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <HAL_TIM_PWM_Start+0x224>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048ea:	e03b      	b.n	8004964 <HAL_TIM_PWM_Start+0x29c>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d11c      	bne.n	800492c <HAL_TIM_PWM_Start+0x264>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048fa:	e033      	b.n	8004964 <HAL_TIM_PWM_Start+0x29c>
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40010400 	.word	0x40010400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800
 800491c:	40001800 	.word	0x40001800
 8004920:	40001c00 	.word	0x40001c00
 8004924:	40002000 	.word	0x40002000
 8004928:	08006e6c 	.word	0x08006e6c
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b08      	cmp	r3, #8
 8004930:	d104      	bne.n	800493c <HAL_TIM_PWM_Start+0x274>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2202      	movs	r2, #2
 8004936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800493a:	e013      	b.n	8004964 <HAL_TIM_PWM_Start+0x29c>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b0c      	cmp	r3, #12
 8004940:	d104      	bne.n	800494c <HAL_TIM_PWM_Start+0x284>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800494a:	e00b      	b.n	8004964 <HAL_TIM_PWM_Start+0x29c>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b10      	cmp	r3, #16
 8004950:	d104      	bne.n	800495c <HAL_TIM_PWM_Start+0x294>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800495a:	e003      	b.n	8004964 <HAL_TIM_PWM_Start+0x29c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2201      	movs	r2, #1
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fe71 	bl	8005654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a31      	ldr	r2, [pc, #196]	@ (8004a3c <HAL_TIM_PWM_Start+0x374>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_TIM_PWM_Start+0x2be>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2f      	ldr	r2, [pc, #188]	@ (8004a40 <HAL_TIM_PWM_Start+0x378>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d101      	bne.n	800498a <HAL_TIM_PWM_Start+0x2c2>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_TIM_PWM_Start+0x2c4>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800499e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a25      	ldr	r2, [pc, #148]	@ (8004a3c <HAL_TIM_PWM_Start+0x374>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d022      	beq.n	80049f0 <HAL_TIM_PWM_Start+0x328>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b2:	d01d      	beq.n	80049f0 <HAL_TIM_PWM_Start+0x328>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a22      	ldr	r2, [pc, #136]	@ (8004a44 <HAL_TIM_PWM_Start+0x37c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <HAL_TIM_PWM_Start+0x328>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a21      	ldr	r2, [pc, #132]	@ (8004a48 <HAL_TIM_PWM_Start+0x380>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_TIM_PWM_Start+0x328>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1f      	ldr	r2, [pc, #124]	@ (8004a4c <HAL_TIM_PWM_Start+0x384>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <HAL_TIM_PWM_Start+0x328>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004a40 <HAL_TIM_PWM_Start+0x378>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_TIM_PWM_Start+0x328>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a50 <HAL_TIM_PWM_Start+0x388>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIM_PWM_Start+0x328>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004a54 <HAL_TIM_PWM_Start+0x38c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d115      	bne.n	8004a1c <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	4b18      	ldr	r3, [pc, #96]	@ (8004a58 <HAL_TIM_PWM_Start+0x390>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d015      	beq.n	8004a2e <HAL_TIM_PWM_Start+0x366>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a08:	d011      	beq.n	8004a2e <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	e008      	b.n	8004a2e <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e000      	b.n	8004a30 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40010400 	.word	0x40010400
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40001800 	.word	0x40001800
 8004a58:	00010007 	.word	0x00010007

08004a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d016      	beq.n	8004aa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d013      	beq.n	8004aa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d010      	beq.n	8004aa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d00d      	beq.n	8004aa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b10      	cmp	r3, #16
 8004a88:	d00a      	beq.n	8004aa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b14      	cmp	r3, #20
 8004a8e:	d007      	beq.n	8004aa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b3c      	cmp	r3, #60	@ 0x3c
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8004a96:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 8004a9a:	4895      	ldr	r0, [pc, #596]	@ (8004cf0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004a9c:	f7fc f808 	bl	8000ab0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b60      	cmp	r3, #96	@ 0x60
 8004aa6:	d01c      	beq.n	8004ae2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b70      	cmp	r3, #112	@ 0x70
 8004aae:	d018      	beq.n	8004ae2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a8f      	ldr	r2, [pc, #572]	@ (8004cf4 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a8e      	ldr	r2, [pc, #568]	@ (8004cf8 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a8c      	ldr	r2, [pc, #560]	@ (8004cfc <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a8b      	ldr	r2, [pc, #556]	@ (8004d00 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004ad8:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8004adc:	4884      	ldr	r0, [pc, #528]	@ (8004cf0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004ade:	f7fb ffe7 	bl	8000ab0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d008      	beq.n	8004afc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d004      	beq.n	8004afc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004af2:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8004af6:	487e      	ldr	r0, [pc, #504]	@ (8004cf0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004af8:	f7fb ffda 	bl	8000ab0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0xba>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d004      	beq.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0xba>
 8004b0c:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8004b10:	4877      	ldr	r0, [pc, #476]	@ (8004cf0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004b12:	f7fb ffcd 	bl	8000ab0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e1f3      	b.n	8004f0c <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b14      	cmp	r3, #20
 8004b30:	f200 81e4 	bhi.w	8004efc <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8004b34:	a201      	add	r2, pc, #4	@ (adr r2, 8004b3c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b91 	.word	0x08004b91
 8004b40:	08004efd 	.word	0x08004efd
 8004b44:	08004efd 	.word	0x08004efd
 8004b48:	08004efd 	.word	0x08004efd
 8004b4c:	08004c53 	.word	0x08004c53
 8004b50:	08004efd 	.word	0x08004efd
 8004b54:	08004efd 	.word	0x08004efd
 8004b58:	08004efd 	.word	0x08004efd
 8004b5c:	08004d31 	.word	0x08004d31
 8004b60:	08004efd 	.word	0x08004efd
 8004b64:	08004efd 	.word	0x08004efd
 8004b68:	08004efd 	.word	0x08004efd
 8004b6c:	08004db7 	.word	0x08004db7
 8004b70:	08004efd 	.word	0x08004efd
 8004b74:	08004efd 	.word	0x08004efd
 8004b78:	08004efd 	.word	0x08004efd
 8004b7c:	08004e3f 	.word	0x08004e3f
 8004b80:	08004efd 	.word	0x08004efd
 8004b84:	08004efd 	.word	0x08004efd
 8004b88:	08004efd 	.word	0x08004efd
 8004b8c:	08004e9d 	.word	0x08004e9d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a5b      	ldr	r2, [pc, #364]	@ (8004d04 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d03b      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba2:	d036      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a57      	ldr	r2, [pc, #348]	@ (8004d08 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d031      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a56      	ldr	r2, [pc, #344]	@ (8004d0c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d02c      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a54      	ldr	r2, [pc, #336]	@ (8004d10 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d027      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a53      	ldr	r2, [pc, #332]	@ (8004d14 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d022      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a51      	ldr	r2, [pc, #324]	@ (8004d18 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01d      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a50      	ldr	r2, [pc, #320]	@ (8004d1c <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d018      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a4e      	ldr	r2, [pc, #312]	@ (8004d20 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a4d      	ldr	r2, [pc, #308]	@ (8004d24 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00e      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8004d28 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a4a      	ldr	r2, [pc, #296]	@ (8004d2c <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004c08:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8004c0c:	4838      	ldr	r0, [pc, #224]	@ (8004cf0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004c0e:	f7fb ff4f 	bl	8000ab0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fa33 	bl	8005084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0208 	orr.w	r2, r2, #8
 8004c2c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699a      	ldr	r2, [r3, #24]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0204 	bic.w	r2, r2, #4
 8004c3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6999      	ldr	r1, [r3, #24]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	619a      	str	r2, [r3, #24]
      break;
 8004c50:	e157      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2b      	ldr	r2, [pc, #172]	@ (8004d04 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d027      	beq.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x250>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c64:	d022      	beq.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x250>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a27      	ldr	r2, [pc, #156]	@ (8004d08 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d01d      	beq.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x250>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a25      	ldr	r2, [pc, #148]	@ (8004d0c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x250>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a24      	ldr	r2, [pc, #144]	@ (8004d10 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x250>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a22      	ldr	r2, [pc, #136]	@ (8004d14 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x250>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a21      	ldr	r2, [pc, #132]	@ (8004d18 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x250>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a21      	ldr	r2, [pc, #132]	@ (8004d24 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x250>
 8004ca2:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 8004ca6:	4812      	ldr	r0, [pc, #72]	@ (8004cf0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004ca8:	f7fb ff02 	bl	8000ab0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fa82 	bl	80051bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6999      	ldr	r1, [r3, #24]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	021a      	lsls	r2, r3, #8
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	619a      	str	r2, [r3, #24]
      break;
 8004cec:	e109      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8004cee:	bf00      	nop
 8004cf0:	08006e6c 	.word	0x08006e6c
 8004cf4:	00010040 	.word	0x00010040
 8004cf8:	00010050 	.word	0x00010050
 8004cfc:	00010060 	.word	0x00010060
 8004d00:	00010070 	.word	0x00010070
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40010400 	.word	0x40010400
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40014400 	.word	0x40014400
 8004d20:	40014800 	.word	0x40014800
 8004d24:	40001800 	.word	0x40001800
 8004d28:	40001c00 	.word	0x40001c00
 8004d2c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a77      	ldr	r2, [pc, #476]	@ (8004f14 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01d      	beq.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d42:	d018      	beq.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a73      	ldr	r2, [pc, #460]	@ (8004f18 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a72      	ldr	r2, [pc, #456]	@ (8004f1c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00e      	beq.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a70      	ldr	r2, [pc, #448]	@ (8004f20 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d009      	beq.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a6f      	ldr	r2, [pc, #444]	@ (8004f24 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004d6c:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8004d70:	486d      	ldr	r0, [pc, #436]	@ (8004f28 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8004d72:	f7fb fe9d 	bl	8000ab0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fabd 	bl	80052fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0208 	orr.w	r2, r2, #8
 8004d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0204 	bic.w	r2, r2, #4
 8004da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69d9      	ldr	r1, [r3, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	61da      	str	r2, [r3, #28]
      break;
 8004db4:	e0a5      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a56      	ldr	r2, [pc, #344]	@ (8004f14 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d01d      	beq.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc8:	d018      	beq.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a52      	ldr	r2, [pc, #328]	@ (8004f18 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a50      	ldr	r2, [pc, #320]	@ (8004f1c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00e      	beq.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a4f      	ldr	r2, [pc, #316]	@ (8004f20 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d009      	beq.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a4d      	ldr	r2, [pc, #308]	@ (8004f24 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004df2:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 8004df6:	484c      	ldr	r0, [pc, #304]	@ (8004f28 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8004df8:	f7fb fe5a 	bl	8000ab0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fb1a 	bl	800543c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69da      	ldr	r2, [r3, #28]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69d9      	ldr	r1, [r3, #28]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	021a      	lsls	r2, r3, #8
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	61da      	str	r2, [r3, #28]
      break;
 8004e3c:	e061      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a34      	ldr	r2, [pc, #208]	@ (8004f14 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d009      	beq.n	8004e5c <HAL_TIM_PWM_ConfigChannel+0x400>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a35      	ldr	r2, [pc, #212]	@ (8004f24 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d004      	beq.n	8004e5c <HAL_TIM_PWM_ConfigChannel+0x400>
 8004e52:	f241 1104 	movw	r1, #4356	@ 0x1104
 8004e56:	4834      	ldr	r0, [pc, #208]	@ (8004f28 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8004e58:	f7fb fe2a 	bl	8000ab0 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fb50 	bl	8005508 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0208 	orr.w	r2, r2, #8
 8004e76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0204 	bic.w	r2, r2, #4
 8004e86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e9a:	e032      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8004f14 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x45e>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8004f24 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d004      	beq.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x45e>
 8004eb0:	f241 1115 	movw	r1, #4373	@ 0x1115
 8004eb4:	481c      	ldr	r0, [pc, #112]	@ (8004f28 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8004eb6:	f7fb fdfb 	bl	8000ab0 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fb73 	bl	80055ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ed4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee4:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	021a      	lsls	r2, r3, #8
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004efa:	e002      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40010000 	.word	0x40010000
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40000c00 	.word	0x40000c00
 8004f24:	40010400 	.word	0x40010400
 8004f28:	08006e6c 	.word	0x08006e6c

08004f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a46      	ldr	r2, [pc, #280]	@ (8005058 <TIM_Base_SetConfig+0x12c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f4a:	d00f      	beq.n	8004f6c <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a43      	ldr	r2, [pc, #268]	@ (800505c <TIM_Base_SetConfig+0x130>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a42      	ldr	r2, [pc, #264]	@ (8005060 <TIM_Base_SetConfig+0x134>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d007      	beq.n	8004f6c <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a41      	ldr	r2, [pc, #260]	@ (8005064 <TIM_Base_SetConfig+0x138>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a40      	ldr	r2, [pc, #256]	@ (8005068 <TIM_Base_SetConfig+0x13c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d108      	bne.n	8004f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a35      	ldr	r2, [pc, #212]	@ (8005058 <TIM_Base_SetConfig+0x12c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d02b      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8c:	d027      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a32      	ldr	r2, [pc, #200]	@ (800505c <TIM_Base_SetConfig+0x130>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d023      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a31      	ldr	r2, [pc, #196]	@ (8005060 <TIM_Base_SetConfig+0x134>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01f      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a30      	ldr	r2, [pc, #192]	@ (8005064 <TIM_Base_SetConfig+0x138>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01b      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8005068 <TIM_Base_SetConfig+0x13c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d017      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800506c <TIM_Base_SetConfig+0x140>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8005070 <TIM_Base_SetConfig+0x144>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00f      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8005074 <TIM_Base_SetConfig+0x148>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00b      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8005078 <TIM_Base_SetConfig+0x14c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800507c <TIM_Base_SetConfig+0x150>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a29      	ldr	r2, [pc, #164]	@ (8005080 <TIM_Base_SetConfig+0x154>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d108      	bne.n	8004ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a10      	ldr	r2, [pc, #64]	@ (8005058 <TIM_Base_SetConfig+0x12c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0xf8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a12      	ldr	r2, [pc, #72]	@ (8005068 <TIM_Base_SetConfig+0x13c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d103      	bne.n	800502c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d105      	bne.n	800504a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f023 0201 	bic.w	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]
  }
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40010000 	.word	0x40010000
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40010400 	.word	0x40010400
 800506c:	40014000 	.word	0x40014000
 8005070:	40014400 	.word	0x40014400
 8005074:	40014800 	.word	0x40014800
 8005078:	40001800 	.word	0x40001800
 800507c:	40001c00 	.word	0x40001c00
 8005080:	40002000 	.word	0x40002000

08005084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f023 0201 	bic.w	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4b3f      	ldr	r3, [pc, #252]	@ (80051ac <TIM_OC1_SetConfig+0x128>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f023 0302 	bic.w	r3, r3, #2
 80050cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a35      	ldr	r2, [pc, #212]	@ (80051b0 <TIM_OC1_SetConfig+0x12c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_OC1_SetConfig+0x64>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a34      	ldr	r2, [pc, #208]	@ (80051b4 <TIM_OC1_SetConfig+0x130>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d119      	bne.n	800511c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <TIM_OC1_SetConfig+0x7e>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d004      	beq.n	8005102 <TIM_OC1_SetConfig+0x7e>
 80050f8:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80050fc:	482e      	ldr	r0, [pc, #184]	@ (80051b8 <TIM_OC1_SetConfig+0x134>)
 80050fe:	f7fb fcd7 	bl	8000ab0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f023 0308 	bic.w	r3, r3, #8
 8005108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0304 	bic.w	r3, r3, #4
 800511a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a24      	ldr	r2, [pc, #144]	@ (80051b0 <TIM_OC1_SetConfig+0x12c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_OC1_SetConfig+0xa8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a23      	ldr	r2, [pc, #140]	@ (80051b4 <TIM_OC1_SetConfig+0x130>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d12d      	bne.n	8005188 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005134:	d008      	beq.n	8005148 <TIM_OC1_SetConfig+0xc4>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <TIM_OC1_SetConfig+0xc4>
 800513e:	f641 3176 	movw	r1, #7030	@ 0x1b76
 8005142:	481d      	ldr	r0, [pc, #116]	@ (80051b8 <TIM_OC1_SetConfig+0x134>)
 8005144:	f7fb fcb4 	bl	8000ab0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005150:	d008      	beq.n	8005164 <TIM_OC1_SetConfig+0xe0>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <TIM_OC1_SetConfig+0xe0>
 800515a:	f641 3177 	movw	r1, #7031	@ 0x1b77
 800515e:	4816      	ldr	r0, [pc, #88]	@ (80051b8 <TIM_OC1_SetConfig+0x134>)
 8005160:	f7fb fca6 	bl	8000ab0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800516a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005172:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	fffeff8f 	.word	0xfffeff8f
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40010400 	.word	0x40010400
 80051b8:	08006e6c 	.word	0x08006e6c

080051bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f023 0210 	bic.w	r2, r3, #16
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4b41      	ldr	r3, [pc, #260]	@ (80052ec <TIM_OC2_SetConfig+0x130>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0320 	bic.w	r3, r3, #32
 8005206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a36      	ldr	r2, [pc, #216]	@ (80052f0 <TIM_OC2_SetConfig+0x134>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_OC2_SetConfig+0x68>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a35      	ldr	r2, [pc, #212]	@ (80052f4 <TIM_OC2_SetConfig+0x138>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d11a      	bne.n	800525a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <TIM_OC2_SetConfig+0x82>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d004      	beq.n	800523e <TIM_OC2_SetConfig+0x82>
 8005234:	f641 31b5 	movw	r1, #7093	@ 0x1bb5
 8005238:	482f      	ldr	r0, [pc, #188]	@ (80052f8 <TIM_OC2_SetConfig+0x13c>)
 800523a:	f7fb fc39 	bl	8000ab0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a24      	ldr	r2, [pc, #144]	@ (80052f0 <TIM_OC2_SetConfig+0x134>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d003      	beq.n	800526a <TIM_OC2_SetConfig+0xae>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a23      	ldr	r2, [pc, #140]	@ (80052f4 <TIM_OC2_SetConfig+0x138>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d12f      	bne.n	80052ca <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005272:	d008      	beq.n	8005286 <TIM_OC2_SetConfig+0xca>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <TIM_OC2_SetConfig+0xca>
 800527c:	f641 31c2 	movw	r1, #7106	@ 0x1bc2
 8005280:	481d      	ldr	r0, [pc, #116]	@ (80052f8 <TIM_OC2_SetConfig+0x13c>)
 8005282:	f7fb fc15 	bl	8000ab0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800528e:	d008      	beq.n	80052a2 <TIM_OC2_SetConfig+0xe6>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <TIM_OC2_SetConfig+0xe6>
 8005298:	f641 31c3 	movw	r1, #7107	@ 0x1bc3
 800529c:	4816      	ldr	r0, [pc, #88]	@ (80052f8 <TIM_OC2_SetConfig+0x13c>)
 800529e:	f7fb fc07 	bl	8000ab0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	621a      	str	r2, [r3, #32]
}
 80052e4:	bf00      	nop
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	feff8fff 	.word	0xfeff8fff
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40010400 	.word	0x40010400
 80052f8:	08006e6c 	.word	0x08006e6c

080052fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4b41      	ldr	r3, [pc, #260]	@ (800542c <TIM_OC3_SetConfig+0x130>)
 8005328:	4013      	ands	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0303 	bic.w	r3, r3, #3
 8005332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a36      	ldr	r2, [pc, #216]	@ (8005430 <TIM_OC3_SetConfig+0x134>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d003      	beq.n	8005362 <TIM_OC3_SetConfig+0x66>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a35      	ldr	r2, [pc, #212]	@ (8005434 <TIM_OC3_SetConfig+0x138>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d11a      	bne.n	8005398 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <TIM_OC3_SetConfig+0x80>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	2b08      	cmp	r3, #8
 8005370:	d004      	beq.n	800537c <TIM_OC3_SetConfig+0x80>
 8005372:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8005376:	4830      	ldr	r0, [pc, #192]	@ (8005438 <TIM_OC3_SetConfig+0x13c>)
 8005378:	f7fb fb9a 	bl	8000ab0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a25      	ldr	r2, [pc, #148]	@ (8005430 <TIM_OC3_SetConfig+0x134>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_OC3_SetConfig+0xac>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a24      	ldr	r2, [pc, #144]	@ (8005434 <TIM_OC3_SetConfig+0x138>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d12f      	bne.n	8005408 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b0:	d008      	beq.n	80053c4 <TIM_OC3_SetConfig+0xc8>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <TIM_OC3_SetConfig+0xc8>
 80053ba:	f641 410d 	movw	r1, #7181	@ 0x1c0d
 80053be:	481e      	ldr	r0, [pc, #120]	@ (8005438 <TIM_OC3_SetConfig+0x13c>)
 80053c0:	f7fb fb76 	bl	8000ab0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053cc:	d008      	beq.n	80053e0 <TIM_OC3_SetConfig+0xe4>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <TIM_OC3_SetConfig+0xe4>
 80053d6:	f641 410e 	movw	r1, #7182	@ 0x1c0e
 80053da:	4817      	ldr	r0, [pc, #92]	@ (8005438 <TIM_OC3_SetConfig+0x13c>)
 80053dc:	f7fb fb68 	bl	8000ab0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	fffeff8f 	.word	0xfffeff8f
 8005430:	40010000 	.word	0x40010000
 8005434:	40010400 	.word	0x40010400
 8005438:	08006e6c 	.word	0x08006e6c

0800543c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4b24      	ldr	r3, [pc, #144]	@ (80054f8 <TIM_OC4_SetConfig+0xbc>)
 8005468:	4013      	ands	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	031b      	lsls	r3, r3, #12
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a19      	ldr	r2, [pc, #100]	@ (80054fc <TIM_OC4_SetConfig+0xc0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <TIM_OC4_SetConfig+0x68>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a18      	ldr	r2, [pc, #96]	@ (8005500 <TIM_OC4_SetConfig+0xc4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d117      	bne.n	80054d4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ac:	d008      	beq.n	80054c0 <TIM_OC4_SetConfig+0x84>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <TIM_OC4_SetConfig+0x84>
 80054b6:	f641 414d 	movw	r1, #7245	@ 0x1c4d
 80054ba:	4812      	ldr	r0, [pc, #72]	@ (8005504 <TIM_OC4_SetConfig+0xc8>)
 80054bc:	f7fb faf8 	bl	8000ab0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	019b      	lsls	r3, r3, #6
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	feff8fff 	.word	0xfeff8fff
 80054fc:	40010000 	.word	0x40010000
 8005500:	40010400 	.word	0x40010400
 8005504:	08006e6c 	.word	0x08006e6c

08005508 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4b1b      	ldr	r3, [pc, #108]	@ (80055a0 <TIM_OC5_SetConfig+0x98>)
 8005534:	4013      	ands	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005548:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a12      	ldr	r2, [pc, #72]	@ (80055a4 <TIM_OC5_SetConfig+0x9c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d003      	beq.n	8005566 <TIM_OC5_SetConfig+0x5e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a11      	ldr	r2, [pc, #68]	@ (80055a8 <TIM_OC5_SetConfig+0xa0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d109      	bne.n	800557a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800556c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	021b      	lsls	r3, r3, #8
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	621a      	str	r2, [r3, #32]
}
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	fffeff8f 	.word	0xfffeff8f
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40010400 	.word	0x40010400

080055ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005648 <TIM_OC6_SetConfig+0x9c>)
 80055d8:	4013      	ands	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	051b      	lsls	r3, r3, #20
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a13      	ldr	r2, [pc, #76]	@ (800564c <TIM_OC6_SetConfig+0xa0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC6_SetConfig+0x60>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a12      	ldr	r2, [pc, #72]	@ (8005650 <TIM_OC6_SetConfig+0xa4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005612:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	029b      	lsls	r3, r3, #10
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	feff8fff 	.word	0xfeff8fff
 800564c:	40010000 	.word	0x40010000
 8005650:	40010400 	.word	0x40010400

08005654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a35      	ldr	r2, [pc, #212]	@ (8005738 <TIM_CCxChannelCmd+0xe4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d030      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800566e:	d02c      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a32      	ldr	r2, [pc, #200]	@ (800573c <TIM_CCxChannelCmd+0xe8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d028      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a31      	ldr	r2, [pc, #196]	@ (8005740 <TIM_CCxChannelCmd+0xec>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d024      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4a30      	ldr	r2, [pc, #192]	@ (8005744 <TIM_CCxChannelCmd+0xf0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d020      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4a2f      	ldr	r2, [pc, #188]	@ (8005748 <TIM_CCxChannelCmd+0xf4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d01c      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4a2e      	ldr	r2, [pc, #184]	@ (800574c <TIM_CCxChannelCmd+0xf8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d018      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4a2d      	ldr	r2, [pc, #180]	@ (8005750 <TIM_CCxChannelCmd+0xfc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d014      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005754 <TIM_CCxChannelCmd+0x100>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d010      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005758 <TIM_CCxChannelCmd+0x104>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00c      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4a2a      	ldr	r2, [pc, #168]	@ (800575c <TIM_CCxChannelCmd+0x108>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d008      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4a29      	ldr	r2, [pc, #164]	@ (8005760 <TIM_CCxChannelCmd+0x10c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d004      	beq.n	80056ca <TIM_CCxChannelCmd+0x76>
 80056c0:	f641 61a7 	movw	r1, #7847	@ 0x1ea7
 80056c4:	4827      	ldr	r0, [pc, #156]	@ (8005764 <TIM_CCxChannelCmd+0x110>)
 80056c6:	f7fb f9f3 	bl	8000ab0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d016      	beq.n	80056fe <TIM_CCxChannelCmd+0xaa>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d013      	beq.n	80056fe <TIM_CCxChannelCmd+0xaa>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d010      	beq.n	80056fe <TIM_CCxChannelCmd+0xaa>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b0c      	cmp	r3, #12
 80056e0:	d00d      	beq.n	80056fe <TIM_CCxChannelCmd+0xaa>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d00a      	beq.n	80056fe <TIM_CCxChannelCmd+0xaa>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b14      	cmp	r3, #20
 80056ec:	d007      	beq.n	80056fe <TIM_CCxChannelCmd+0xaa>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b3c      	cmp	r3, #60	@ 0x3c
 80056f2:	d004      	beq.n	80056fe <TIM_CCxChannelCmd+0xaa>
 80056f4:	f641 61a8 	movw	r1, #7848	@ 0x1ea8
 80056f8:	481a      	ldr	r0, [pc, #104]	@ (8005764 <TIM_CCxChannelCmd+0x110>)
 80056fa:	f7fb f9d9 	bl	8000ab0 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	2201      	movs	r2, #1
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	43db      	mvns	r3, r3
 8005714:	401a      	ands	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1a      	ldr	r2, [r3, #32]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	fa01 f303 	lsl.w	r3, r1, r3
 800572a:	431a      	orrs	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	621a      	str	r2, [r3, #32]
}
 8005730:	bf00      	nop
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40010000 	.word	0x40010000
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40010400 	.word	0x40010400
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800
 8005758:	40001800 	.word	0x40001800
 800575c:	40001c00 	.word	0x40001c00
 8005760:	40002000 	.word	0x40002000
 8005764:	08006e6c 	.word	0x08006e6c

08005768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a32      	ldr	r2, [pc, #200]	@ (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d027      	beq.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005784:	d022      	beq.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2e      	ldr	r2, [pc, #184]	@ (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d01d      	beq.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a2c      	ldr	r2, [pc, #176]	@ (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d018      	beq.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2b      	ldr	r2, [pc, #172]	@ (800584c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d013      	beq.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a29      	ldr	r2, [pc, #164]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00e      	beq.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a28      	ldr	r2, [pc, #160]	@ (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d009      	beq.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a26      	ldr	r2, [pc, #152]	@ (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80057c2:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 80057c6:	4825      	ldr	r0, [pc, #148]	@ (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057c8:	f7fb f972 	bl	8000ab0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d020      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d01c      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d018      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b30      	cmp	r3, #48	@ 0x30
 80057ea:	d014      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b40      	cmp	r3, #64	@ 0x40
 80057f2:	d010      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b50      	cmp	r3, #80	@ 0x50
 80057fa:	d00c      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b60      	cmp	r3, #96	@ 0x60
 8005802:	d008      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b70      	cmp	r3, #112	@ 0x70
 800580a:	d004      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800580c:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8005810:	4812      	ldr	r0, [pc, #72]	@ (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005812:	f7fb f94d 	bl	8000ab0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b80      	cmp	r3, #128	@ 0x80
 800581c:	d008      	beq.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d004      	beq.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005826:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800582a:	480c      	ldr	r0, [pc, #48]	@ (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800582c:	f7fb f940 	bl	8000ab0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005836:	2b01      	cmp	r3, #1
 8005838:	d112      	bne.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800583a:	2302      	movs	r3, #2
 800583c:	e0d7      	b.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0x286>
 800583e:	bf00      	nop
 8005840:	40010000 	.word	0x40010000
 8005844:	40000400 	.word	0x40000400
 8005848:	40000800 	.word	0x40000800
 800584c:	40000c00 	.word	0x40000c00
 8005850:	40001000 	.word	0x40001000
 8005854:	40001400 	.word	0x40001400
 8005858:	40010400 	.word	0x40010400
 800585c:	08006ea4 	.word	0x08006ea4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a5c      	ldr	r2, [pc, #368]	@ (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a5b      	ldr	r2, [pc, #364]	@ (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d161      	bne.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d054      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058a4:	d04f      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058ae:	d04a      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058b8:	d045      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058c2:	d040      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80058cc:	d03b      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80058d6:	d036      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80058e0:	d031      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 80058ea:	d02c      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058f4:	d027      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 80058fe:	d022      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005908:	d01d      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8005912:	d018      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800591c:	d013      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8005926:	d00e      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8005930:	d009      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800593a:	d004      	beq.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800593c:	f240 71bf 	movw	r1, #1983	@ 0x7bf
 8005940:	482f      	ldr	r0, [pc, #188]	@ (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8005942:	f7fb f8b5 	bl	8000ab0 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800594c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a20      	ldr	r2, [pc, #128]	@ (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005984:	d01d      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1e      	ldr	r2, [pc, #120]	@ (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1c      	ldr	r2, [pc, #112]	@ (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a14      	ldr	r2, [pc, #80]	@ (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a17      	ldr	r2, [pc, #92]	@ (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a15      	ldr	r2, [pc, #84]	@ (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10c      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40010400 	.word	0x40010400
 8005a00:	08006ea4 	.word	0x08006ea4
 8005a04:	40000400 	.word	0x40000400
 8005a08:	40000800 	.word	0x40000800
 8005a0c:	40000c00 	.word	0x40000c00
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40001800 	.word	0x40001800

08005a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e09f      	b.n	8005b6a <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02d      	beq.n	8005a8e <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a4f      	ldr	r2, [pc, #316]	@ (8005b74 <HAL_UART_Init+0x15c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d055      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a4d      	ldr	r2, [pc, #308]	@ (8005b78 <HAL_UART_Init+0x160>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d050      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a4c      	ldr	r2, [pc, #304]	@ (8005b7c <HAL_UART_Init+0x164>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d04b      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a4a      	ldr	r2, [pc, #296]	@ (8005b80 <HAL_UART_Init+0x168>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d046      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a49      	ldr	r2, [pc, #292]	@ (8005b84 <HAL_UART_Init+0x16c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d041      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a47      	ldr	r2, [pc, #284]	@ (8005b88 <HAL_UART_Init+0x170>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d03c      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a46      	ldr	r2, [pc, #280]	@ (8005b8c <HAL_UART_Init+0x174>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d037      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a44      	ldr	r2, [pc, #272]	@ (8005b90 <HAL_UART_Init+0x178>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d032      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005a82:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005a86:	4843      	ldr	r0, [pc, #268]	@ (8005b94 <HAL_UART_Init+0x17c>)
 8005a88:	f7fb f812 	bl	8000ab0 <assert_failed>
 8005a8c:	e02c      	b.n	8005ae8 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a38      	ldr	r2, [pc, #224]	@ (8005b74 <HAL_UART_Init+0x15c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d027      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a36      	ldr	r2, [pc, #216]	@ (8005b78 <HAL_UART_Init+0x160>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d022      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a35      	ldr	r2, [pc, #212]	@ (8005b7c <HAL_UART_Init+0x164>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d01d      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a33      	ldr	r2, [pc, #204]	@ (8005b80 <HAL_UART_Init+0x168>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d018      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a32      	ldr	r2, [pc, #200]	@ (8005b84 <HAL_UART_Init+0x16c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d013      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a30      	ldr	r2, [pc, #192]	@ (8005b88 <HAL_UART_Init+0x170>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00e      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a2f      	ldr	r2, [pc, #188]	@ (8005b8c <HAL_UART_Init+0x174>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8005b90 <HAL_UART_Init+0x178>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_UART_Init+0xd0>
 8005ade:	f240 1131 	movw	r1, #305	@ 0x131
 8005ae2:	482c      	ldr	r0, [pc, #176]	@ (8005b94 <HAL_UART_Init+0x17c>)
 8005ae4:	f7fa ffe4 	bl	8000ab0 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d106      	bne.n	8005afe <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7fb f98b 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2224      	movs	r2, #36	@ 0x24
 8005b02:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_UART_Init+0x10a>
  {
    UART_AdvFeatureConfig(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fb31 	bl	8006184 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f838 	bl	8005b98 <UART_SetConfig>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_UART_Init+0x11a>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e01b      	b.n	8005b6a <HAL_UART_Init+0x152>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0201 	orr.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fc66 	bl	8006434 <UART_CheckIdleState>
 8005b68:	4603      	mov	r3, r0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40011000 	.word	0x40011000
 8005b78:	40004400 	.word	0x40004400
 8005b7c:	40004800 	.word	0x40004800
 8005b80:	40004c00 	.word	0x40004c00
 8005b84:	40005000 	.word	0x40005000
 8005b88:	40011400 	.word	0x40011400
 8005b8c:	40007800 	.word	0x40007800
 8005b90:	40007c00 	.word	0x40007c00
 8005b94:	08006ee0 	.word	0x08006ee0

08005b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4aa0      	ldr	r2, [pc, #640]	@ (8005e2c <UART_SetConfig+0x294>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d904      	bls.n	8005bb8 <UART_SetConfig+0x20>
 8005bae:	f640 315f 	movw	r1, #2911	@ 0xb5f
 8005bb2:	489f      	ldr	r0, [pc, #636]	@ (8005e30 <UART_SetConfig+0x298>)
 8005bb4:	f7fa ff7c 	bl	8000ab0 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bc0:	d00d      	beq.n	8005bde <UART_SetConfig+0x46>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <UART_SetConfig+0x46>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bd2:	d004      	beq.n	8005bde <UART_SetConfig+0x46>
 8005bd4:	f44f 6136 	mov.w	r1, #2912	@ 0xb60
 8005bd8:	4895      	ldr	r0, [pc, #596]	@ (8005e30 <UART_SetConfig+0x298>)
 8005bda:	f7fa ff69 	bl	8000ab0 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be6:	d012      	beq.n	8005c0e <UART_SetConfig+0x76>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00e      	beq.n	8005c0e <UART_SetConfig+0x76>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bf8:	d009      	beq.n	8005c0e <UART_SetConfig+0x76>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c02:	d004      	beq.n	8005c0e <UART_SetConfig+0x76>
 8005c04:	f640 3161 	movw	r1, #2913	@ 0xb61
 8005c08:	4889      	ldr	r0, [pc, #548]	@ (8005e30 <UART_SetConfig+0x298>)
 8005c0a:	f7fa ff51 	bl	8000ab0 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <UART_SetConfig+0x92>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c1e:	d004      	beq.n	8005c2a <UART_SetConfig+0x92>
 8005c20:	f640 3162 	movw	r1, #2914	@ 0xb62
 8005c24:	4882      	ldr	r0, [pc, #520]	@ (8005e30 <UART_SetConfig+0x298>)
 8005c26:	f7fa ff43 	bl	8000ab0 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00e      	beq.n	8005c50 <UART_SetConfig+0xb8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c3a:	d009      	beq.n	8005c50 <UART_SetConfig+0xb8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c44:	d004      	beq.n	8005c50 <UART_SetConfig+0xb8>
 8005c46:	f640 3164 	movw	r1, #2916	@ 0xb64
 8005c4a:	4879      	ldr	r0, [pc, #484]	@ (8005e30 <UART_SetConfig+0x298>)
 8005c4c:	f7fa ff30 	bl	8000ab0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	f023 030c 	bic.w	r3, r3, #12
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <UART_SetConfig+0xcc>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <UART_SetConfig+0xd6>
 8005c64:	f640 3165 	movw	r1, #2917	@ 0xb65
 8005c68:	4871      	ldr	r0, [pc, #452]	@ (8005e30 <UART_SetConfig+0x298>)
 8005c6a:	f7fa ff21 	bl	8000ab0 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d013      	beq.n	8005c9e <UART_SetConfig+0x106>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c7e:	d00e      	beq.n	8005c9e <UART_SetConfig+0x106>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c88:	d009      	beq.n	8005c9e <UART_SetConfig+0x106>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c92:	d004      	beq.n	8005c9e <UART_SetConfig+0x106>
 8005c94:	f640 3166 	movw	r1, #2918	@ 0xb66
 8005c98:	4865      	ldr	r0, [pc, #404]	@ (8005e30 <UART_SetConfig+0x298>)
 8005c9a:	f7fa ff09 	bl	8000ab0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <UART_SetConfig+0x122>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cae:	d004      	beq.n	8005cba <UART_SetConfig+0x122>
 8005cb0:	f640 3167 	movw	r1, #2919	@ 0xb67
 8005cb4:	485e      	ldr	r0, [pc, #376]	@ (8005e30 <UART_SetConfig+0x298>)
 8005cb6:	f7fa fefb 	bl	8000ab0 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	4b56      	ldr	r3, [pc, #344]	@ (8005e34 <UART_SetConfig+0x29c>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6812      	ldr	r2, [r2, #0]
 8005ce0:	6979      	ldr	r1, [r7, #20]
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a44      	ldr	r2, [pc, #272]	@ (8005e38 <UART_SetConfig+0x2a0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d121      	bne.n	8005d6e <UART_SetConfig+0x1d6>
 8005d2a:	4b44      	ldr	r3, [pc, #272]	@ (8005e3c <UART_SetConfig+0x2a4>)
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d817      	bhi.n	8005d68 <UART_SetConfig+0x1d0>
 8005d38:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <UART_SetConfig+0x1a8>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d51 	.word	0x08005d51
 8005d44:	08005d5d 	.word	0x08005d5d
 8005d48:	08005d57 	.word	0x08005d57
 8005d4c:	08005d63 	.word	0x08005d63
 8005d50:	2301      	movs	r3, #1
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e14c      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005d56:	2302      	movs	r3, #2
 8005d58:	77fb      	strb	r3, [r7, #31]
 8005d5a:	e149      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	e146      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005d62:	2308      	movs	r3, #8
 8005d64:	77fb      	strb	r3, [r7, #31]
 8005d66:	e143      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	77fb      	strb	r3, [r7, #31]
 8005d6c:	e140      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a33      	ldr	r2, [pc, #204]	@ (8005e40 <UART_SetConfig+0x2a8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d132      	bne.n	8005dde <UART_SetConfig+0x246>
 8005d78:	4b30      	ldr	r3, [pc, #192]	@ (8005e3c <UART_SetConfig+0x2a4>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	2b0c      	cmp	r3, #12
 8005d84:	d828      	bhi.n	8005dd8 <UART_SetConfig+0x240>
 8005d86:	a201      	add	r2, pc, #4	@ (adr r2, 8005d8c <UART_SetConfig+0x1f4>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005dc1 	.word	0x08005dc1
 8005d90:	08005dd9 	.word	0x08005dd9
 8005d94:	08005dd9 	.word	0x08005dd9
 8005d98:	08005dd9 	.word	0x08005dd9
 8005d9c:	08005dcd 	.word	0x08005dcd
 8005da0:	08005dd9 	.word	0x08005dd9
 8005da4:	08005dd9 	.word	0x08005dd9
 8005da8:	08005dd9 	.word	0x08005dd9
 8005dac:	08005dc7 	.word	0x08005dc7
 8005db0:	08005dd9 	.word	0x08005dd9
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005dd9 	.word	0x08005dd9
 8005dbc:	08005dd3 	.word	0x08005dd3
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	77fb      	strb	r3, [r7, #31]
 8005dc4:	e114      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	77fb      	strb	r3, [r7, #31]
 8005dca:	e111      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	77fb      	strb	r3, [r7, #31]
 8005dd0:	e10e      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	77fb      	strb	r3, [r7, #31]
 8005dd6:	e10b      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005dd8:	2310      	movs	r3, #16
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e108      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a18      	ldr	r2, [pc, #96]	@ (8005e44 <UART_SetConfig+0x2ac>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d12f      	bne.n	8005e48 <UART_SetConfig+0x2b0>
 8005de8:	4b14      	ldr	r3, [pc, #80]	@ (8005e3c <UART_SetConfig+0x2a4>)
 8005dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005df2:	2b30      	cmp	r3, #48	@ 0x30
 8005df4:	d013      	beq.n	8005e1e <UART_SetConfig+0x286>
 8005df6:	2b30      	cmp	r3, #48	@ 0x30
 8005df8:	d814      	bhi.n	8005e24 <UART_SetConfig+0x28c>
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d009      	beq.n	8005e12 <UART_SetConfig+0x27a>
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d810      	bhi.n	8005e24 <UART_SetConfig+0x28c>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <UART_SetConfig+0x274>
 8005e06:	2b10      	cmp	r3, #16
 8005e08:	d006      	beq.n	8005e18 <UART_SetConfig+0x280>
 8005e0a:	e00b      	b.n	8005e24 <UART_SetConfig+0x28c>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e0ee      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005e12:	2302      	movs	r3, #2
 8005e14:	77fb      	strb	r3, [r7, #31]
 8005e16:	e0eb      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e0e8      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e0e5      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005e24:	2310      	movs	r3, #16
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e0e2      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005e2a:	bf00      	nop
 8005e2c:	019bfcc0 	.word	0x019bfcc0
 8005e30:	08006ee0 	.word	0x08006ee0
 8005e34:	efff69f3 	.word	0xefff69f3
 8005e38:	40011000 	.word	0x40011000
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	40004400 	.word	0x40004400
 8005e44:	40004800 	.word	0x40004800
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4aa5      	ldr	r2, [pc, #660]	@ (80060e4 <UART_SetConfig+0x54c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d120      	bne.n	8005e94 <UART_SetConfig+0x2fc>
 8005e52:	4ba5      	ldr	r3, [pc, #660]	@ (80060e8 <UART_SetConfig+0x550>)
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e58:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e5c:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e5e:	d013      	beq.n	8005e88 <UART_SetConfig+0x2f0>
 8005e60:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e62:	d814      	bhi.n	8005e8e <UART_SetConfig+0x2f6>
 8005e64:	2b80      	cmp	r3, #128	@ 0x80
 8005e66:	d009      	beq.n	8005e7c <UART_SetConfig+0x2e4>
 8005e68:	2b80      	cmp	r3, #128	@ 0x80
 8005e6a:	d810      	bhi.n	8005e8e <UART_SetConfig+0x2f6>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <UART_SetConfig+0x2de>
 8005e70:	2b40      	cmp	r3, #64	@ 0x40
 8005e72:	d006      	beq.n	8005e82 <UART_SetConfig+0x2ea>
 8005e74:	e00b      	b.n	8005e8e <UART_SetConfig+0x2f6>
 8005e76:	2300      	movs	r3, #0
 8005e78:	77fb      	strb	r3, [r7, #31]
 8005e7a:	e0b9      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e0b6      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005e82:	2304      	movs	r3, #4
 8005e84:	77fb      	strb	r3, [r7, #31]
 8005e86:	e0b3      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	77fb      	strb	r3, [r7, #31]
 8005e8c:	e0b0      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005e8e:	2310      	movs	r3, #16
 8005e90:	77fb      	strb	r3, [r7, #31]
 8005e92:	e0ad      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a94      	ldr	r2, [pc, #592]	@ (80060ec <UART_SetConfig+0x554>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d125      	bne.n	8005eea <UART_SetConfig+0x352>
 8005e9e:	4b92      	ldr	r3, [pc, #584]	@ (80060e8 <UART_SetConfig+0x550>)
 8005ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ea8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eac:	d017      	beq.n	8005ede <UART_SetConfig+0x346>
 8005eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb2:	d817      	bhi.n	8005ee4 <UART_SetConfig+0x34c>
 8005eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb8:	d00b      	beq.n	8005ed2 <UART_SetConfig+0x33a>
 8005eba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ebe:	d811      	bhi.n	8005ee4 <UART_SetConfig+0x34c>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <UART_SetConfig+0x334>
 8005ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec8:	d006      	beq.n	8005ed8 <UART_SetConfig+0x340>
 8005eca:	e00b      	b.n	8005ee4 <UART_SetConfig+0x34c>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e08e      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	77fb      	strb	r3, [r7, #31]
 8005ed6:	e08b      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	77fb      	strb	r3, [r7, #31]
 8005edc:	e088      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005ede:	2308      	movs	r3, #8
 8005ee0:	77fb      	strb	r3, [r7, #31]
 8005ee2:	e085      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	77fb      	strb	r3, [r7, #31]
 8005ee8:	e082      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a80      	ldr	r2, [pc, #512]	@ (80060f0 <UART_SetConfig+0x558>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d125      	bne.n	8005f40 <UART_SetConfig+0x3a8>
 8005ef4:	4b7c      	ldr	r3, [pc, #496]	@ (80060e8 <UART_SetConfig+0x550>)
 8005ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005efa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005efe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f02:	d017      	beq.n	8005f34 <UART_SetConfig+0x39c>
 8005f04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f08:	d817      	bhi.n	8005f3a <UART_SetConfig+0x3a2>
 8005f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f0e:	d00b      	beq.n	8005f28 <UART_SetConfig+0x390>
 8005f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f14:	d811      	bhi.n	8005f3a <UART_SetConfig+0x3a2>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <UART_SetConfig+0x38a>
 8005f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f1e:	d006      	beq.n	8005f2e <UART_SetConfig+0x396>
 8005f20:	e00b      	b.n	8005f3a <UART_SetConfig+0x3a2>
 8005f22:	2301      	movs	r3, #1
 8005f24:	77fb      	strb	r3, [r7, #31]
 8005f26:	e063      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	77fb      	strb	r3, [r7, #31]
 8005f2c:	e060      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005f2e:	2304      	movs	r3, #4
 8005f30:	77fb      	strb	r3, [r7, #31]
 8005f32:	e05d      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005f34:	2308      	movs	r3, #8
 8005f36:	77fb      	strb	r3, [r7, #31]
 8005f38:	e05a      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005f3a:	2310      	movs	r3, #16
 8005f3c:	77fb      	strb	r3, [r7, #31]
 8005f3e:	e057      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a6b      	ldr	r2, [pc, #428]	@ (80060f4 <UART_SetConfig+0x55c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d125      	bne.n	8005f96 <UART_SetConfig+0x3fe>
 8005f4a:	4b67      	ldr	r3, [pc, #412]	@ (80060e8 <UART_SetConfig+0x550>)
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f50:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005f54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f58:	d017      	beq.n	8005f8a <UART_SetConfig+0x3f2>
 8005f5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f5e:	d817      	bhi.n	8005f90 <UART_SetConfig+0x3f8>
 8005f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f64:	d00b      	beq.n	8005f7e <UART_SetConfig+0x3e6>
 8005f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f6a:	d811      	bhi.n	8005f90 <UART_SetConfig+0x3f8>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <UART_SetConfig+0x3e0>
 8005f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f74:	d006      	beq.n	8005f84 <UART_SetConfig+0x3ec>
 8005f76:	e00b      	b.n	8005f90 <UART_SetConfig+0x3f8>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	77fb      	strb	r3, [r7, #31]
 8005f7c:	e038      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	77fb      	strb	r3, [r7, #31]
 8005f82:	e035      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005f84:	2304      	movs	r3, #4
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e032      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	77fb      	strb	r3, [r7, #31]
 8005f8e:	e02f      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005f90:	2310      	movs	r3, #16
 8005f92:	77fb      	strb	r3, [r7, #31]
 8005f94:	e02c      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a57      	ldr	r2, [pc, #348]	@ (80060f8 <UART_SetConfig+0x560>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d125      	bne.n	8005fec <UART_SetConfig+0x454>
 8005fa0:	4b51      	ldr	r3, [pc, #324]	@ (80060e8 <UART_SetConfig+0x550>)
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005faa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005fae:	d017      	beq.n	8005fe0 <UART_SetConfig+0x448>
 8005fb0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005fb4:	d817      	bhi.n	8005fe6 <UART_SetConfig+0x44e>
 8005fb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fba:	d00b      	beq.n	8005fd4 <UART_SetConfig+0x43c>
 8005fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fc0:	d811      	bhi.n	8005fe6 <UART_SetConfig+0x44e>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <UART_SetConfig+0x436>
 8005fc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fca:	d006      	beq.n	8005fda <UART_SetConfig+0x442>
 8005fcc:	e00b      	b.n	8005fe6 <UART_SetConfig+0x44e>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	77fb      	strb	r3, [r7, #31]
 8005fd2:	e00d      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e00a      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005fda:	2304      	movs	r3, #4
 8005fdc:	77fb      	strb	r3, [r7, #31]
 8005fde:	e007      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e004      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005fe6:	2310      	movs	r3, #16
 8005fe8:	77fb      	strb	r3, [r7, #31]
 8005fea:	e001      	b.n	8005ff0 <UART_SetConfig+0x458>
 8005fec:	2310      	movs	r3, #16
 8005fee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ff8:	d15c      	bne.n	80060b4 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8005ffa:	7ffb      	ldrb	r3, [r7, #31]
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d828      	bhi.n	8006052 <UART_SetConfig+0x4ba>
 8006000:	a201      	add	r2, pc, #4	@ (adr r2, 8006008 <UART_SetConfig+0x470>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006035 	.word	0x08006035
 8006010:	0800603d 	.word	0x0800603d
 8006014:	08006053 	.word	0x08006053
 8006018:	08006043 	.word	0x08006043
 800601c:	08006053 	.word	0x08006053
 8006020:	08006053 	.word	0x08006053
 8006024:	08006053 	.word	0x08006053
 8006028:	0800604b 	.word	0x0800604b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602c:	f7fd fa20 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 8006030:	61b8      	str	r0, [r7, #24]
        break;
 8006032:	e013      	b.n	800605c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006034:	f7fd fa30 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8006038:	61b8      	str	r0, [r7, #24]
        break;
 800603a:	e00f      	b.n	800605c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800603c:	4b2f      	ldr	r3, [pc, #188]	@ (80060fc <UART_SetConfig+0x564>)
 800603e:	61bb      	str	r3, [r7, #24]
        break;
 8006040:	e00c      	b.n	800605c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006042:	f7fd f903 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8006046:	61b8      	str	r0, [r7, #24]
        break;
 8006048:	e008      	b.n	800605c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800604e:	61bb      	str	r3, [r7, #24]
        break;
 8006050:	e004      	b.n	800605c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	77bb      	strb	r3, [r7, #30]
        break;
 800605a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8082 	beq.w	8006168 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	005a      	lsls	r2, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	441a      	add	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	fbb2 f3f3 	udiv	r3, r2, r3
 8006078:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b0f      	cmp	r3, #15
 800607e:	d916      	bls.n	80060ae <UART_SetConfig+0x516>
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006086:	d212      	bcs.n	80060ae <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	b29b      	uxth	r3, r3
 800608c:	f023 030f 	bic.w	r3, r3, #15
 8006090:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	b29b      	uxth	r3, r3
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	b29a      	uxth	r2, r3
 800609e:	89fb      	ldrh	r3, [r7, #14]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	89fa      	ldrh	r2, [r7, #14]
 80060aa:	60da      	str	r2, [r3, #12]
 80060ac:	e05c      	b.n	8006168 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	77bb      	strb	r3, [r7, #30]
 80060b2:	e059      	b.n	8006168 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060b4:	7ffb      	ldrb	r3, [r7, #31]
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d835      	bhi.n	8006126 <UART_SetConfig+0x58e>
 80060ba:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <UART_SetConfig+0x528>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	08006101 	.word	0x08006101
 80060c4:	08006109 	.word	0x08006109
 80060c8:	08006111 	.word	0x08006111
 80060cc:	08006127 	.word	0x08006127
 80060d0:	08006117 	.word	0x08006117
 80060d4:	08006127 	.word	0x08006127
 80060d8:	08006127 	.word	0x08006127
 80060dc:	08006127 	.word	0x08006127
 80060e0:	0800611f 	.word	0x0800611f
 80060e4:	40004c00 	.word	0x40004c00
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40005000 	.word	0x40005000
 80060f0:	40011400 	.word	0x40011400
 80060f4:	40007800 	.word	0x40007800
 80060f8:	40007c00 	.word	0x40007c00
 80060fc:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006100:	f7fd f9b6 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 8006104:	61b8      	str	r0, [r7, #24]
        break;
 8006106:	e013      	b.n	8006130 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006108:	f7fd f9c6 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 800610c:	61b8      	str	r0, [r7, #24]
        break;
 800610e:	e00f      	b.n	8006130 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006110:	4b1b      	ldr	r3, [pc, #108]	@ (8006180 <UART_SetConfig+0x5e8>)
 8006112:	61bb      	str	r3, [r7, #24]
        break;
 8006114:	e00c      	b.n	8006130 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006116:	f7fd f899 	bl	800324c <HAL_RCC_GetSysClockFreq>
 800611a:	61b8      	str	r0, [r7, #24]
        break;
 800611c:	e008      	b.n	8006130 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006122:	61bb      	str	r3, [r7, #24]
        break;
 8006124:	e004      	b.n	8006130 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	77bb      	strb	r3, [r7, #30]
        break;
 800612e:	bf00      	nop
    }

    if (pclk != 0U)
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d018      	beq.n	8006168 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	085a      	lsrs	r2, r3, #1
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	441a      	add	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2b0f      	cmp	r3, #15
 800614e:	d909      	bls.n	8006164 <UART_SetConfig+0x5cc>
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006156:	d205      	bcs.n	8006164 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	b29a      	uxth	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60da      	str	r2, [r3, #12]
 8006162:	e001      	b.n	8006168 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006174:	7fbb      	ldrb	r3, [r7, #30]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	00f42400 	.word	0x00f42400

08006184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	2bff      	cmp	r3, #255	@ 0xff
 8006192:	d904      	bls.n	800619e <UART_AdvFeatureConfig+0x1a>
 8006194:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 8006198:	488e      	ldr	r0, [pc, #568]	@ (80063d4 <UART_AdvFeatureConfig+0x250>)
 800619a:	f7fa fc89 	bl	8000ab0 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d018      	beq.n	80061dc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <UART_AdvFeatureConfig+0x42>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ba:	d004      	beq.n	80061c6 <UART_AdvFeatureConfig+0x42>
 80061bc:	f640 31ed 	movw	r1, #3053	@ 0xbed
 80061c0:	4884      	ldr	r0, [pc, #528]	@ (80063d4 <UART_AdvFeatureConfig+0x250>)
 80061c2:	f7fa fc75 	bl	8000ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d018      	beq.n	800621a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d009      	beq.n	8006204 <UART_AdvFeatureConfig+0x80>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061f8:	d004      	beq.n	8006204 <UART_AdvFeatureConfig+0x80>
 80061fa:	f640 31f4 	movw	r1, #3060	@ 0xbf4
 80061fe:	4875      	ldr	r0, [pc, #468]	@ (80063d4 <UART_AdvFeatureConfig+0x250>)
 8006200:	f7fa fc56 	bl	8000ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d018      	beq.n	8006258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <UART_AdvFeatureConfig+0xbe>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006236:	d004      	beq.n	8006242 <UART_AdvFeatureConfig+0xbe>
 8006238:	f640 31fb 	movw	r1, #3067	@ 0xbfb
 800623c:	4865      	ldr	r0, [pc, #404]	@ (80063d4 <UART_AdvFeatureConfig+0x250>)
 800623e:	f7fa fc37 	bl	8000ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d018      	beq.n	8006296 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006268:	2b00      	cmp	r3, #0
 800626a:	d009      	beq.n	8006280 <UART_AdvFeatureConfig+0xfc>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006270:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006274:	d004      	beq.n	8006280 <UART_AdvFeatureConfig+0xfc>
 8006276:	f640 4102 	movw	r1, #3074	@ 0xc02
 800627a:	4856      	ldr	r0, [pc, #344]	@ (80063d4 <UART_AdvFeatureConfig+0x250>)
 800627c:	f7fa fc18 	bl	8000ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d018      	beq.n	80062d4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <UART_AdvFeatureConfig+0x13a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b2:	d004      	beq.n	80062be <UART_AdvFeatureConfig+0x13a>
 80062b4:	f640 4109 	movw	r1, #3081	@ 0xc09
 80062b8:	4846      	ldr	r0, [pc, #280]	@ (80063d4 <UART_AdvFeatureConfig+0x250>)
 80062ba:	f7fa fbf9 	bl	8000ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d018      	beq.n	8006312 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d009      	beq.n	80062fc <UART_AdvFeatureConfig+0x178>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062f0:	d004      	beq.n	80062fc <UART_AdvFeatureConfig+0x178>
 80062f2:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 80062f6:	4837      	ldr	r0, [pc, #220]	@ (80063d4 <UART_AdvFeatureConfig+0x250>)
 80062f8:	f7fa fbda 	bl	8000ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d064      	beq.n	80063e8 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a2d      	ldr	r2, [pc, #180]	@ (80063d8 <UART_AdvFeatureConfig+0x254>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <UART_AdvFeatureConfig+0x1cc>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a2b      	ldr	r2, [pc, #172]	@ (80063dc <UART_AdvFeatureConfig+0x258>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00e      	beq.n	8006350 <UART_AdvFeatureConfig+0x1cc>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a2a      	ldr	r2, [pc, #168]	@ (80063e0 <UART_AdvFeatureConfig+0x25c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d009      	beq.n	8006350 <UART_AdvFeatureConfig+0x1cc>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a28      	ldr	r2, [pc, #160]	@ (80063e4 <UART_AdvFeatureConfig+0x260>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <UART_AdvFeatureConfig+0x1cc>
 8006346:	f640 4117 	movw	r1, #3095	@ 0xc17
 800634a:	4822      	ldr	r0, [pc, #136]	@ (80063d4 <UART_AdvFeatureConfig+0x250>)
 800634c:	f7fa fbb0 	bl	8000ab0 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <UART_AdvFeatureConfig+0x1e8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006360:	d004      	beq.n	800636c <UART_AdvFeatureConfig+0x1e8>
 8006362:	f640 4118 	movw	r1, #3096	@ 0xc18
 8006366:	481b      	ldr	r0, [pc, #108]	@ (80063d4 <UART_AdvFeatureConfig+0x250>)
 8006368:	f7fa fba2 	bl	8000ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800638a:	d12d      	bne.n	80063e8 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006390:	2b00      	cmp	r3, #0
 8006392:	d013      	beq.n	80063bc <UART_AdvFeatureConfig+0x238>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006398:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800639c:	d00e      	beq.n	80063bc <UART_AdvFeatureConfig+0x238>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063a6:	d009      	beq.n	80063bc <UART_AdvFeatureConfig+0x238>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80063b0:	d004      	beq.n	80063bc <UART_AdvFeatureConfig+0x238>
 80063b2:	f640 411d 	movw	r1, #3101	@ 0xc1d
 80063b6:	4807      	ldr	r0, [pc, #28]	@ (80063d4 <UART_AdvFeatureConfig+0x250>)
 80063b8:	f7fa fb7a 	bl	8000ab0 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e009      	b.n	80063e8 <UART_AdvFeatureConfig+0x264>
 80063d4:	08006ee0 	.word	0x08006ee0
 80063d8:	40011000 	.word	0x40011000
 80063dc:	40004400 	.word	0x40004400
 80063e0:	40004800 	.word	0x40004800
 80063e4:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d018      	beq.n	8006426 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d009      	beq.n	8006410 <UART_AdvFeatureConfig+0x28c>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006400:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006404:	d004      	beq.n	8006410 <UART_AdvFeatureConfig+0x28c>
 8006406:	f640 4125 	movw	r1, #3109	@ 0xc25
 800640a:	4809      	ldr	r0, [pc, #36]	@ (8006430 <UART_AdvFeatureConfig+0x2ac>)
 800640c:	f7fa fb50 	bl	8000ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
  }
}
 8006426:	bf00      	nop
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	08006ee0 	.word	0x08006ee0

08006434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08c      	sub	sp, #48	@ 0x30
 8006438:	af02      	add	r7, sp, #8
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006444:	f7fa fe68 	bl	8001118 <HAL_GetTick>
 8006448:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b08      	cmp	r3, #8
 8006456:	d12e      	bne.n	80064b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006458:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	2200      	movs	r2, #0
 8006462:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f83b 	bl	80064e2 <UART_WaitOnFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d021      	beq.n	80064b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006486:	623b      	str	r3, [r7, #32]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	61fb      	str	r3, [r7, #28]
 8006492:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	69b9      	ldr	r1, [r7, #24]
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	617b      	str	r3, [r7, #20]
   return(result);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e6      	bne.n	8006472 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e011      	b.n	80064da <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3728      	adds	r7, #40	@ 0x28
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	603b      	str	r3, [r7, #0]
 80064ee:	4613      	mov	r3, r2
 80064f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f2:	e04f      	b.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fa:	d04b      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064fc:	f7fa fe0c 	bl	8001118 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	429a      	cmp	r2, r3
 800650a:	d302      	bcc.n	8006512 <UART_WaitOnFlagUntilTimeout+0x30>
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e04e      	b.n	80065b4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d037      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b80      	cmp	r3, #128	@ 0x80
 8006528:	d034      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b40      	cmp	r3, #64	@ 0x40
 800652e:	d031      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b08      	cmp	r3, #8
 800653c:	d110      	bne.n	8006560 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2208      	movs	r2, #8
 8006544:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f838 	bl	80065bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2208      	movs	r2, #8
 8006550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e029      	b.n	80065b4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800656a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800656e:	d111      	bne.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006578:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f81e 	bl	80065bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e00f      	b.n	80065b4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4013      	ands	r3, r2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d0a0      	beq.n	80064f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b095      	sub	sp, #84	@ 0x54
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80065e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e6      	bne.n	80065c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	61fb      	str	r3, [r7, #28]
   return(result);
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	f023 0301 	bic.w	r3, r3, #1
 800660c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3308      	adds	r3, #8
 8006614:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006618:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800661c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e5      	bne.n	80065f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800662e:	2b01      	cmp	r3, #1
 8006630:	d118      	bne.n	8006664 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f023 0310 	bic.w	r3, r3, #16
 8006646:	647b      	str	r3, [r7, #68]	@ 0x44
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6979      	ldr	r1, [r7, #20]
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	613b      	str	r3, [r7, #16]
   return(result);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e6      	bne.n	8006632 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006678:	bf00      	nop
 800667a:	3754      	adds	r7, #84	@ 0x54
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006684:	b084      	sub	sp, #16
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	f107 001c 	add.w	r0, r7, #28
 8006692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006696:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800669a:	2b01      	cmp	r3, #1
 800669c:	d121      	bne.n	80066e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	4b21      	ldr	r3, [pc, #132]	@ (8006734 <USB_CoreInit+0xb0>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d105      	bne.n	80066d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa92 	bl	8006c00 <USB_CoreReset>
 80066dc:	4603      	mov	r3, r0
 80066de:	73fb      	strb	r3, [r7, #15]
 80066e0:	e010      	b.n	8006704 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa86 	bl	8006c00 <USB_CoreReset>
 80066f4:	4603      	mov	r3, r0
 80066f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006704:	7fbb      	ldrb	r3, [r7, #30]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d10b      	bne.n	8006722 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f043 0206 	orr.w	r2, r3, #6
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f043 0220 	orr.w	r2, r3, #32
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006722:	7bfb      	ldrb	r3, [r7, #15]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800672e:	b004      	add	sp, #16
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	ffbdffbf 	.word	0xffbdffbf

08006738 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f023 0201 	bic.w	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	460b      	mov	r3, r1
 8006764:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d115      	bne.n	80067a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006788:	200a      	movs	r0, #10
 800678a:	f7fa fcd1 	bl	8001130 <HAL_Delay>
      ms += 10U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	330a      	adds	r3, #10
 8006792:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fa25 	bl	8006be4 <USB_GetMode>
 800679a:	4603      	mov	r3, r0
 800679c:	2b01      	cmp	r3, #1
 800679e:	d01e      	beq.n	80067de <USB_SetCurrentMode+0x84>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80067a4:	d9f0      	bls.n	8006788 <USB_SetCurrentMode+0x2e>
 80067a6:	e01a      	b.n	80067de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d115      	bne.n	80067da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80067ba:	200a      	movs	r0, #10
 80067bc:	f7fa fcb8 	bl	8001130 <HAL_Delay>
      ms += 10U;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	330a      	adds	r3, #10
 80067c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa0c 	bl	8006be4 <USB_GetMode>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <USB_SetCurrentMode+0x84>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80067d6:	d9f0      	bls.n	80067ba <USB_SetCurrentMode+0x60>
 80067d8:	e001      	b.n	80067de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e005      	b.n	80067ea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80067e2:	d101      	bne.n	80067e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067f4:	b084      	sub	sp, #16
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b086      	sub	sp, #24
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800680e:	2300      	movs	r3, #0
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	e009      	b.n	8006828 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	3340      	adds	r3, #64	@ 0x40
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	2200      	movs	r2, #0
 8006820:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	3301      	adds	r3, #1
 8006826:	613b      	str	r3, [r7, #16]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b0e      	cmp	r3, #14
 800682c:	d9f2      	bls.n	8006814 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800682e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006832:	2b00      	cmp	r3, #0
 8006834:	d11c      	bne.n	8006870 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006844:	f043 0302 	orr.w	r3, r3, #2
 8006848:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e005      	b.n	800687c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006874:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006882:	461a      	mov	r2, r3
 8006884:	2300      	movs	r3, #0
 8006886:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006888:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10d      	bne.n	80068ac <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006898:	2100      	movs	r1, #0
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f968 	bl	8006b70 <USB_SetDevSpeed>
 80068a0:	e008      	b.n	80068b4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068a2:	2101      	movs	r1, #1
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f963 	bl	8006b70 <USB_SetDevSpeed>
 80068aa:	e003      	b.n	80068b4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068ac:	2103      	movs	r1, #3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f95e 	bl	8006b70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068b4:	2110      	movs	r1, #16
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f8fa 	bl	8006ab0 <USB_FlushTxFifo>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f924 	bl	8006b14 <USB_FlushRxFifo>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068dc:	461a      	mov	r2, r3
 80068de:	2300      	movs	r3, #0
 80068e0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e8:	461a      	mov	r2, r3
 80068ea:	2300      	movs	r3, #0
 80068ec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f4:	461a      	mov	r2, r3
 80068f6:	2300      	movs	r3, #0
 80068f8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068fa:	2300      	movs	r3, #0
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	e043      	b.n	8006988 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006912:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006916:	d118      	bne.n	800694a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10a      	bne.n	8006934 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692a:	461a      	mov	r2, r3
 800692c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e013      	b.n	800695c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006940:	461a      	mov	r2, r3
 8006942:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	e008      	b.n	800695c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006956:	461a      	mov	r2, r3
 8006958:	2300      	movs	r3, #0
 800695a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006968:	461a      	mov	r2, r3
 800696a:	2300      	movs	r3, #0
 800696c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697a:	461a      	mov	r2, r3
 800697c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006980:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	3301      	adds	r3, #1
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800698c:	461a      	mov	r2, r3
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	4293      	cmp	r3, r2
 8006992:	d3b5      	bcc.n	8006900 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006994:	2300      	movs	r3, #0
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	e043      	b.n	8006a22 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069b0:	d118      	bne.n	80069e4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c4:	461a      	mov	r2, r3
 80069c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	e013      	b.n	80069f6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069da:	461a      	mov	r2, r3
 80069dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e008      	b.n	80069f6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f0:	461a      	mov	r2, r3
 80069f2:	2300      	movs	r3, #0
 80069f4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a02:	461a      	mov	r2, r3
 8006a04:	2300      	movs	r3, #0
 8006a06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a14:	461a      	mov	r2, r3
 8006a16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a26:	461a      	mov	r2, r3
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d3b5      	bcc.n	800699a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a40:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006a4e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d105      	bne.n	8006a64 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f043 0210 	orr.w	r2, r3, #16
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699a      	ldr	r2, [r3, #24]
 8006a68:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa8 <USB_DevInit+0x2b4>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d005      	beq.n	8006a84 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	f043 0208 	orr.w	r2, r3, #8
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d105      	bne.n	8006a98 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699a      	ldr	r2, [r3, #24]
 8006a90:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <USB_DevInit+0x2b8>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aa4:	b004      	add	sp, #16
 8006aa6:	4770      	bx	lr
 8006aa8:	803c3800 	.word	0x803c3800
 8006aac:	40000004 	.word	0x40000004

08006ab0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006aca:	d901      	bls.n	8006ad0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e01b      	b.n	8006b08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	daf2      	bge.n	8006abe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	019b      	lsls	r3, r3, #6
 8006ae0:	f043 0220 	orr.w	r2, r3, #32
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006af4:	d901      	bls.n	8006afa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e006      	b.n	8006b08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d0f0      	beq.n	8006ae8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3301      	adds	r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b2c:	d901      	bls.n	8006b32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e018      	b.n	8006b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	daf2      	bge.n	8006b20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2210      	movs	r2, #16
 8006b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b50:	d901      	bls.n	8006b56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e006      	b.n	8006b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	2b10      	cmp	r3, #16
 8006b60:	d0f0      	beq.n	8006b44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	68f9      	ldr	r1, [r7, #12]
 8006b8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b90:	4313      	orrs	r3, r2
 8006b92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bbc:	f023 0303 	bic.w	r3, r3, #3
 8006bc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bd0:	f043 0302 	orr.w	r3, r3, #2
 8006bd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c18:	d901      	bls.n	8006c1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e01b      	b.n	8006c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	daf2      	bge.n	8006c0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f043 0201 	orr.w	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c42:	d901      	bls.n	8006c48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e006      	b.n	8006c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d0f0      	beq.n	8006c36 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <memset>:
 8006c62:	4402      	add	r2, r0
 8006c64:	4603      	mov	r3, r0
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d100      	bne.n	8006c6c <memset+0xa>
 8006c6a:	4770      	bx	lr
 8006c6c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c70:	e7f9      	b.n	8006c66 <memset+0x4>
	...

08006c74 <__libc_init_array>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	4d0d      	ldr	r5, [pc, #52]	@ (8006cac <__libc_init_array+0x38>)
 8006c78:	4c0d      	ldr	r4, [pc, #52]	@ (8006cb0 <__libc_init_array+0x3c>)
 8006c7a:	1b64      	subs	r4, r4, r5
 8006c7c:	10a4      	asrs	r4, r4, #2
 8006c7e:	2600      	movs	r6, #0
 8006c80:	42a6      	cmp	r6, r4
 8006c82:	d109      	bne.n	8006c98 <__libc_init_array+0x24>
 8006c84:	4d0b      	ldr	r5, [pc, #44]	@ (8006cb4 <__libc_init_array+0x40>)
 8006c86:	4c0c      	ldr	r4, [pc, #48]	@ (8006cb8 <__libc_init_array+0x44>)
 8006c88:	f000 f818 	bl	8006cbc <_init>
 8006c8c:	1b64      	subs	r4, r4, r5
 8006c8e:	10a4      	asrs	r4, r4, #2
 8006c90:	2600      	movs	r6, #0
 8006c92:	42a6      	cmp	r6, r4
 8006c94:	d105      	bne.n	8006ca2 <__libc_init_array+0x2e>
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c9c:	4798      	blx	r3
 8006c9e:	3601      	adds	r6, #1
 8006ca0:	e7ee      	b.n	8006c80 <__libc_init_array+0xc>
 8006ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca6:	4798      	blx	r3
 8006ca8:	3601      	adds	r6, #1
 8006caa:	e7f2      	b.n	8006c92 <__libc_init_array+0x1e>
 8006cac:	08006f3c 	.word	0x08006f3c
 8006cb0:	08006f3c 	.word	0x08006f3c
 8006cb4:	08006f3c 	.word	0x08006f3c
 8006cb8:	08006f40 	.word	0x08006f40

08006cbc <_init>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	bf00      	nop
 8006cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc2:	bc08      	pop	{r3}
 8006cc4:	469e      	mov	lr, r3
 8006cc6:	4770      	bx	lr

08006cc8 <_fini>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr
